#ifdef _WINDOWS
#include <GL/glew.h>
#endif
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
#include <SDL_mixer.h>
#include "ShaderProgram.h"
#include <vector>
#include <fstream>
#include <string>
#include <iostream>
#include <sstream>
#include <vector>

using namespace std;

#ifdef _WINDOWS
#define RESOURCE_FOLDER ""
#else
#define RESOURCE_FOLDER "NYUCodebase.app/Contents/Resources/"
#endif

#define FIXED_TIMESTEP 0.0166666f
#define MAX_TIMESTEPS 6

float TILE_SIZE = 0.5f;

const int runAnimation[] = {9, 10, 11, 12, 13};
const int numFrames = 5;
float animationElapsed = 0.0f;
float framesPerSecond = 30.0f;
int currentIndex = 0;

const int runAnimationRuby[] = {0, 1, 2, 3, 4, 5, 6};
const int numFramesRuby = 7;
float animationElapsedRuby = 0.0f;
float framesPerSecondRuby = 30.0f;
int currentIndexRuby = 0;

const int runAnimationEnemy[] = {24, 25, 26, 27};
const int numFramesEnemy = 4;
float animationElapsedEnemy = 0.0f;
float framesPerSecondEnemy = 30.0f;
int currentIndexEnemy = 0;

const int runAnimationFire[] = {0, 1, 2, 3, 5};
const int numFramesFire = 5;
float animationElapsedFire = 0.0f;
float framesPerSecondFire = 30.0f;
int currentIndexFire = 0;

int health = 3;
float friction = 2.0f;
float gravity = 2.0f;
float gravity2 = 2.75f;
float gravity3 = 2.0;
float penetration = 0.0f;
float y_distance, x_distance;
float adjustY, adjustX;
float accelerationX = 1.0f, accelerationY;
bool onFloor = false, moveJump = false, moveDown = false, moveLeft = false, moveRight = false;
int score = 0;
bool temp = true, music2 = false, music3 = false;
bool playerOn27 = false, playerOn35 = false, playerOn36 = false, playerOn37 = false, playerOn38 = false;

enum GameState { STATE_MAIN_MENU, STATE_GAME_LEVEL1, STATE_PAUSE1, STATE_GAME_LEVEL2, STATE_PAUSE2, STATE_GAME_LEVEL3, STATE_GAME_END, STATE_GAME_WIN };
int state = STATE_MAIN_MENU;

float lastFrameTicks = 0.0f;
const Uint8 *keys = SDL_GetKeyboardState(NULL);


unsigned char levelData[25][130] =
{
    {12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,12,12,16,12,12,14,12,12,12,12,16,12,12,12,12,12,12,12,16,12,12,12,12,12,16,12,12,12,12,12,12,12,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,14,12,12,15,12,12,12,12,15,12,12,12,12,12,12,12,12,12,12,12,12,12,15,12,12,12,12,12,12,12,22,15,5,22,22,12,16,12,16,12,12,12,15,23,23,23,15,12,12},
    {12,15,14,12,12,12,12,12,12,12,14,12,14,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,15,12,15,12,12,12,12,12,14,12,12,12,12,12,16,12,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,12,16,12,12,12,12,12,12,12,12,14,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,16,12,16,12,15,12,12,12,15,12,12,12,12,12,12,14,12,14,12,1,2,2,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {14,12,12,15,22,22,22,15,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,12,12,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,12,12,12,12,12,14,12,15,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,14,12,12,12,12,12,12,12,12,12,12,15,12,12,14,12,12,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {12,12,1,2,2,2,2,2,3,12,12,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,16,12,12,15,12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,15,15,12,12,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,14,12,12,12,12,12,12,12,16,12,16,12,12,15,12,12,12,12,12,12,12,12,14,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {12,12,9,10,10,10,10,10,11,12,16,12,12,12,12,14,15,12,12,12,12,12,12,14,12,12,12,12,12,12,12,12,12,12,15,12,12,15,12,12,12,12,12,14,12,12,12,12,15,15,12,12,12,12,12,12,16,12,12,12,14,22,12,12,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,22,22,22,12,23,12,12,12,12,14,12,12,12,12,12,4,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {12,16,9,10,10,10,10,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,12,12,12,12,12,12,12,23,12,12,12,12,12,12,12,12,12,12,12,12,12,15,12,12,12,12,12,12,5,12,12,12,12,12,12,15,12,12,12,12,16,12,12,14,12,14,12,12,12,12,0,12,15,12,23,22,12,12,1,2,2,2,2,2,3,12,12,16,12,12,12,12,12,15,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {16,12,9,10,10,10,10,10,11,12,12,12,12,16,12,12,12,12,12,12,12,15,12,12,16,12,4,12,12,12,12,12,15,12,12,12,12,12,12,15,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,16,12,12,23,12,1,2,3,12,17,18,18,18,18,18,19,12,12,12,12,12,15,12,12,22,22,22,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {12,12,9,10,10,10,10,10,11,12,12,12,12,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,12,12,16,12,12,12,16,12,14,12,23,12,13,22,22,12,12,14,12,12,12,12,12,12,12,12,12,12,12,12,23,22,22,13,12,22,12,12,12,12,12,12,12,22,12,12,12,12,12,12,12,12,12,12,12,23,12,5,12,17,18,19,12,12,24,12,12,24,24,24,14,12,12,12,12,12,12,1,2,2,2,2,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {22,22,9,10,10,10,10,10,11,12,12,23,12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,12,12,12,12,12,12,12,12,12,12,12,1,2,7,2,2,3,12,12,12,12,12,12,12,23,12,12,12,12,12,12,1,2,2,7,2,3,12,12,12,16,12,23,1,3,12,12,22,12,12,12,12,23,22,12,1,3,12,21,12,24,14,24,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {2,2,2,2,2,2,2,2,2,2,2,3,12,12,12,12,12,12,12,14,15,12,12,12,12,22,22,22,12,22,22,22,12,12,12,12,12,12,9,10,10,10,10,11,12,12,12,14,12,12,12,1,2,3,12,12,12,12,9,10,10,10,10,11,12,12,12,12,23,1,8,11,15,12,1,2,2,2,2,2,3,12,17,19,12,24,12,12,12,14,12,15,12,16,12,14,12,12,12,12,12,12,15,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,11,12,15,12,12,12,16,12,12,12,12,12,23,12,1,2,3,12,1,2,3,12,16,12,15,12,12,9,10,10,10,10,11,12,12,12,12,12,12,12,17,18,19,12,12,12,12,9,10,10,10,10,11,12,12,12,23,1,8,10,11,12,12,9,10,10,10,10,10,11,12,24,22,22,22,12,12,22,22,22,23,22,12,12,12,12,16,12,23,22,22,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,12,16,12,12,12,5,12,17,18,19,12,17,18,19,12,12,12,12,12,12,9,10,10,10,10,11,12,12,12,12,12,15,12,12,12,24,12,12,22,22,9,10,10,10,1,2,2,2,2,2,8,10,10,11,12,12,9,10,10,10,10,10,11,12,12,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,12,12,16,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,14,12,12,12,12,12,12,5,13,12,24,24,15,12,24,24,24,12,12,12,12,12,12,9,10,10,10,10,11,12,12,12,12,12,12,23,22,12,12,12,1,2,2,2,2,2,2,8,10,10,10,10,10,10,10,10,11,15,12,9,10,10,10,10,10,11,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,22,23,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,11,22,22,12,12,12,12,12,12,23,5,13,13,23,12,12,12,12,12,12,12,12,22,23,12,12,12,9,10,10,10,10,11,22,12,12,12,12,23,1,2,2,2,2,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,17,18,18,18,10,10,10,10,10,10,10,10,10,10,10,18,18,18,19,12,1,2,3,20,20,20,20,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,7,7,3,16,12,12,12,12,12,12,12,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,24,24,12,12,9,10,10,10,10,10,10,10,10,10,11,12,24,24,24,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,15,12,12,12,15,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,15,9,10,10,10,10,10,11,15,12,12,14,12,14,9,10,10,10,10,10,10,10,10,10,11,14,12,12,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,15,12,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,14,12,12,12,9,10,10,10,10,10,10,10,10,10,11,12,14,12,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,16,12,12,14,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,14,12,14,12,9,10,10,10,10,10,10,10,10,10,11,12,14,12,15,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,15,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,15,12,9,10,10,10,10,10,11,15,12,12,12,12,14,9,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,16,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,14,12,12,12,12,9,10,10,10,10,10,10,10,10,10,11,12,12,12,12,15,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,16,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,12,12,15,12,9,10,10,10,10,10,10,10,10,10,11,12,15,12,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,15,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,15,12,12,12,9,10,10,10,10,10,10,10,10,10,11,12,12,15,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,14,12,12,15,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,11,12,12,12,12,15,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,15,12,12,12,12,12,12,12,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,10,10,10,10,10,11,12,12,12,12,14,12,9,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,9,10,11,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10}
};

unsigned char levelData2[150][40] =
{
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,17,18,18,18,18,18,18,18,18,18,18,18,18,18},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10}
};

unsigned char levelData3[150][62] =
{
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
    {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10}
};

//-----------------------------------------------------------------------------------------

GLuint LoadTexture(const char *image_path) {
    SDL_Surface *surface = IMG_Load(image_path);
    GLuint textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, surface->w, surface->h, 0, GL_BGRA,
                 GL_UNSIGNED_BYTE, surface->pixels);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    SDL_FreeSurface(surface);
    return textureID;
}

//-----------------------------------------------------------------------------------------

//Draw evenly spaced spritesheets
void DrawSpriteSheetSprite(ShaderProgram *program, int spriteTexture, float vertices[] ,int index, int spriteCountX, int spriteCountY) {
    float u = (float)(((int)index) % spriteCountX) / (float) spriteCountX;
    float v = (float)(((int)index) / spriteCountX) / (float) spriteCountY;
    float spriteWidth = 1.0/(float)spriteCountX;
    float spriteHeight = 1.0/(float)spriteCountY;
    GLfloat texCoords[] = {
        u, v+spriteHeight,
        u+spriteWidth, v,
        u, v,
        u+spriteWidth, v,
        u, v+spriteHeight,
        u+spriteWidth, v+spriteHeight
    };
    // our regular sprite drawing
    
    glBindTexture(GL_TEXTURE_2D, spriteTexture);
    
    glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertices);
    glEnableVertexAttribArray(program->positionAttribute);
    
    glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
    glEnableVertexAttribArray(program->texCoordAttribute);
    glDrawArrays(GL_TRIANGLES, 0, 6);
    glDisableVertexAttribArray(program->positionAttribute);
    glDisableVertexAttribArray(program->texCoordAttribute);
}

//-----------------------------------------------------------------------------------------

void DrawWorld(ShaderProgram *program, int spriteSheet, int LEVEL_HEIGHT, int LEVEL_WIDTH, unsigned char leveldata, int SPRITE_COUNT_X, int SPRITE_COUNT_Y) {
    std::vector<float> vertexData;
    std::vector<float> texCoordData;
    for(int y=0; y < LEVEL_HEIGHT; y++) {
        for(int x=0; x < LEVEL_WIDTH; x++) {
            if(levelData[y][x] != 11) {
                float u = (float)(((int)levelData[y][x]) % SPRITE_COUNT_X) / (float) SPRITE_COUNT_X;
                float v = (float)(((int)levelData[y][x]) / SPRITE_COUNT_X) / (float) SPRITE_COUNT_Y;
                float spriteWidth = 1.0f/(float)SPRITE_COUNT_X;
                float spriteHeight = 1.0f/(float)SPRITE_COUNT_Y;
                vertexData.insert(vertexData.end(), {
                    TILE_SIZE * x, -TILE_SIZE * y,
                    TILE_SIZE * x, (-TILE_SIZE * y)-TILE_SIZE,
                    (TILE_SIZE * x)+TILE_SIZE, (-TILE_SIZE * y)-TILE_SIZE,
                    TILE_SIZE * x, -TILE_SIZE * y,
                    (TILE_SIZE * x)+TILE_SIZE, (-TILE_SIZE * y)-TILE_SIZE,
                    (TILE_SIZE * x)+TILE_SIZE, -TILE_SIZE * y
            });
        
            texCoordData.insert(texCoordData.end(), {
                u, v,
                u, v+(spriteHeight),
                u+spriteWidth, v+(spriteHeight),
                u, v,
                u+spriteWidth, v+(spriteHeight),
                u+spriteWidth, v
                });
           }
        }
    }

    glUseProgram(program->programID);
    glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertexData.data());
    glEnableVertexAttribArray(program->positionAttribute);
    glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoordData.data());
    glEnableVertexAttribArray(program->texCoordAttribute);
    glBindTexture(GL_TEXTURE_2D, spriteSheet);
    glDrawArrays(GL_TRIANGLES, 0, vertexData.size()/2);
    glDisableVertexAttribArray(program->positionAttribute);
    glDisableVertexAttribArray(program->texCoordAttribute);
    
}

void DrawWorld2(ShaderProgram *program, int spriteSheet, int LEVEL_HEIGHT, int LEVEL_WIDTH, int SPRITE_COUNT_X, int SPRITE_COUNT_Y) {
    std::vector<float> vertexData;
    std::vector<float> texCoordData;
    for(int y=0; y < LEVEL_HEIGHT; y++) {
        for(int x=0; x < LEVEL_WIDTH; x++) {
            if(levelData2[y][x] != 19) {
                float u = (float)(((int)levelData2[y][x]) % SPRITE_COUNT_X) / (float) SPRITE_COUNT_X;
                float v = (float)(((int)levelData2[y][x]) / SPRITE_COUNT_X) / (float) SPRITE_COUNT_Y;
                float spriteWidth = 1.0f/(float)SPRITE_COUNT_X;
                float spriteHeight = 1.0f/(float)SPRITE_COUNT_Y;
                vertexData.insert(vertexData.end(), {
                    TILE_SIZE * x, -TILE_SIZE * y,
                    TILE_SIZE * x, (-TILE_SIZE * y)-TILE_SIZE,
                    (TILE_SIZE * x)+TILE_SIZE, (-TILE_SIZE * y)-TILE_SIZE,
                    TILE_SIZE * x, -TILE_SIZE * y,
                    (TILE_SIZE * x)+TILE_SIZE, (-TILE_SIZE * y)-TILE_SIZE,
                    (TILE_SIZE * x)+TILE_SIZE, -TILE_SIZE * y
                });
                
                texCoordData.insert(texCoordData.end(), {
                    u, v,
                    u, v+(spriteHeight),
                    u+spriteWidth, v+(spriteHeight),
                    u, v,
                    u+spriteWidth, v+(spriteHeight),
                    u+spriteWidth, v
                });
            }
        }
    }
    
    glUseProgram(program->programID);
    glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertexData.data());
    glEnableVertexAttribArray(program->positionAttribute);
    glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoordData.data());
    glEnableVertexAttribArray(program->texCoordAttribute);
    glBindTexture(GL_TEXTURE_2D, spriteSheet);
    glDrawArrays(GL_TRIANGLES, 0, vertexData.size()/2);
    glDisableVertexAttribArray(program->positionAttribute);
    glDisableVertexAttribArray(program->texCoordAttribute);
    
}

void DrawWorld3(ShaderProgram *program, int spriteSheet, int LEVEL_HEIGHT, int LEVEL_WIDTH, int SPRITE_COUNT_X, int SPRITE_COUNT_Y) {
    std::vector<float> vertexData;
    std::vector<float> texCoordData;
    for(int y=0; y < LEVEL_HEIGHT; y++) {
        for(int x=0; x < LEVEL_WIDTH; x++) {
            if(levelData3[y][x] != 19) {
                float u = (float)(((int)levelData3[y][x]) % SPRITE_COUNT_X) / (float) SPRITE_COUNT_X;
                float v = (float)(((int)levelData3[y][x]) / SPRITE_COUNT_X) / (float) SPRITE_COUNT_Y;
                float spriteWidth = 1.0f/(float)SPRITE_COUNT_X;
                float spriteHeight = 1.0f/(float)SPRITE_COUNT_Y;
                vertexData.insert(vertexData.end(), {
                    TILE_SIZE * x, -TILE_SIZE * y,
                    TILE_SIZE * x, (-TILE_SIZE * y)-TILE_SIZE,
                    (TILE_SIZE * x)+TILE_SIZE, (-TILE_SIZE * y)-TILE_SIZE,
                    TILE_SIZE * x, -TILE_SIZE * y,
                    (TILE_SIZE * x)+TILE_SIZE, (-TILE_SIZE * y)-TILE_SIZE,
                    (TILE_SIZE * x)+TILE_SIZE, -TILE_SIZE * y
                });
                
                texCoordData.insert(texCoordData.end(), {
                    u, v,
                    u, v+(spriteHeight),
                    u+spriteWidth, v+(spriteHeight),
                    u, v,
                    u+spriteWidth, v+(spriteHeight),
                    u+spriteWidth, v
                });
            }
        }
    }
    
    glUseProgram(program->programID);
    glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertexData.data());
    glEnableVertexAttribArray(program->positionAttribute);
    glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoordData.data());
    glEnableVertexAttribArray(program->texCoordAttribute);
    glBindTexture(GL_TEXTURE_2D, spriteSheet);
    glDrawArrays(GL_TRIANGLES, 0, vertexData.size()/2);
    glDisableVertexAttribArray(program->positionAttribute);
    glDisableVertexAttribArray(program->texCoordAttribute);
    
}


//-----------------------------------------------------------------------------------------

void DrawText(ShaderProgram *program, int fontTexture, std::string text, float size, float spacing) {
    float texture_size = 1.0/16.0f;
    std::vector<float> vertexData;
    std::vector<float> texCoordData;
    for(int i=0; i < text.size(); i++) {
        float texture_x = (float)(((int)text[i]) % 16) / 16.0f;
        float texture_y = (float)(((int)text[i]) / 16) / 16.0f;
        vertexData.insert(vertexData.end(), {
            ((size+spacing) * i) + (-0.5f * size), 0.5f * size,
            ((size+spacing) * i) + (-0.5f * size), -0.5f * size,
            ((size+spacing) * i) + (0.5f * size), 0.5f * size,
            ((size+spacing) * i) + (0.5f * size), -0.5f * size,
            ((size+spacing) * i) + (0.5f * size), 0.5f * size,
            ((size+spacing) * i) + (-0.5f * size), -0.5f * size,
        });
        texCoordData.insert(texCoordData.end(), {
            texture_x, texture_y,
            texture_x, texture_y + texture_size,
            texture_x + texture_size, texture_y,
            texture_x + texture_size, texture_y + texture_size,
            texture_x + texture_size, texture_y,
            texture_x, texture_y + texture_size,
        }); }
    glUseProgram(program->programID);
    glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertexData.data());
    glEnableVertexAttribArray(program->positionAttribute);
    glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoordData.data());
    glEnableVertexAttribArray(program->texCoordAttribute);
    glBindTexture(GL_TEXTURE_2D, fontTexture);
    glDrawArrays(GL_TRIANGLES, 0, text.size() * 6);
    glDisableVertexAttribArray(program->positionAttribute);
    glDisableVertexAttribArray(program->texCoordAttribute);
}

void DrawSingle(ShaderProgram *program, float vertices[], GLuint texture) {
    
    float texCoords[] = {0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0};
    
    glBindTexture(GL_TEXTURE_2D, texture);
    
    glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertices);
    glEnableVertexAttribArray(program->positionAttribute);
    
    glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
    glEnableVertexAttribArray(program->texCoordAttribute);
    glDrawArrays(GL_TRIANGLES, 0, 6);
    glDisableVertexAttribArray(program->positionAttribute);
    glDisableVertexAttribArray(program->texCoordAttribute);
}
//-----------------------------------------------------------------------------------------

class Vector3 {
public:
    Vector3(float x, float y, float z) : x(x), y(y), z(z) {}
    
    float x;
    float y;
    float z;
};

class Entity {
public:
    Entity(Vector3 position, Vector3 velocity, Vector3 size) : position(position), velocity(velocity), size(size) {}
    
    Vector3 position;
    Vector3 velocity;
    Vector3 size;
};

class Platform {
public:
    Platform(Vector3 position, Vector3 size) : position(position), size(size) {}
    
    Vector3 position;
    Vector3 size;
};

class Item {
public:
    Item(Vector3 position, Vector3 size, bool alive): position(position), size(size), alive(alive) {}
    
    Vector3 position;
    Vector3 size;
    bool alive;
};

//-----------------------------------------------------------------------------------------

float lerp(float v0, float v1, float t) {
    return (1.0-t)*v0 + t*v1;
}

//-----------------------------------------------------------------------------------------

bool collisionItemEntity(Item one, Entity two){
    if(one.position.y - one.size.y/2 >= two.position.y + two.size.y/2) return true;
    if(one.position.y + one.size.y/2 <= two.position.y - two.size.y/2) return true;
    if(one.position.x - one.size.x/2 >= two.position.x + two.size.x/2) return true;
    if(one.position.x + one.size.x/2 <= two.position.x - two.size.x/2) return true;
    return false;
}

bool collisionEnemyWorld(Platform one, Entity two){
    if(one.position.y - one.size.y/2 >= two.position.y + two.size.y/2) return true;
    if(one.position.y + one.size.y/2 <= two.position.y - two.size.y/2) return true;
    if(one.position.x - one.size.x/2 >= two.position.x + two.size.x/2) return true;
    if(one.position.x + one.size.x/2 <= two.position.x - two.size.x/2) return true;
    return false;
}

bool collisionEntityEntity(Entity one, Entity two){
    if(one.position.y - one.size.y/2 >= two.position.y + two.size.y/2) return true;
    if(one.position.y + one.size.y/2 <= two.position.y - two.size.y/2) return true;
    if(one.position.x - one.size.x/2 >= two.position.x + two.size.x/2) return true;
    if(one.position.x + one.size.x/2 <= two.position.x - two.size.x/2) return true;
    return false;
}

bool collisionYBot(Platform world, Entity player){
    float playerBot = player.position.y - player.size.y/2;
    float playerRight = player.position.x + player.size.x/2;
    float playerLeft = player.position.x - player.size.x/2;
    float playerTop = player.position.y + player.size.y/2;
    float worldTop = world.position.y + world.size.y/2;
    float worldRight = world.position.x + world.size.x/2;
    float worldLeft = world.position.x - world.size.x/2;
    float worldBot = world.position.y - world.size.y/2;
    
    if(playerBot >= worldTop)   return true;
    if(playerTop <= worldBot)   return true;
    if(playerLeft >= worldRight) return true;
    if(playerRight <= worldLeft) return true;
    
    if(playerBot <= worldTop && playerTop > worldTop) {
        y_distance = player.position.y - world.position.y;
        penetration = fabs(y_distance - player.size.y/2 - world.size.y/2);
        adjustY = penetration;
        return false;
    }
    return true;
}

bool collisionYBot(Entity world, Entity player){
    float playerBot = player.position.y - player.size.y/2;
    float playerRight = player.position.x + player.size.x/2;
    float playerLeft = player.position.x - player.size.x/2;
    float playerTop = player.position.y + player.size.y/2;
    float worldTop = world.position.y + world.size.y/2;
    float worldRight = world.position.x + world.size.x/2;
    float worldLeft = world.position.x - world.size.x/2;
    float worldBot = world.position.y - world.size.y/2;
    
    if(playerBot >= worldTop)   return true;
    if(playerTop <= worldBot)   return true;
    if(playerLeft >= worldRight) return true;
    if(playerRight <= worldLeft) return true;
    
    if(playerBot <= worldTop && playerTop > worldTop) {
        y_distance = player.position.y - world.position.y;
        penetration = fabs(y_distance - player.size.y/2 - world.size.y/2);
        adjustY = penetration;
        return false;
    }
    return true;
}

bool collisionXRight(Platform world, Entity player){
    float playerBot = player.position.y - player.size.y/2;
    float playerRight = player.position.x + player.size.x/2;
    float playerLeft = player.position.x - player.size.x/2;
    float playerTop = player.position.y + player.size.y/2;
    float worldTop = world.position.y + world.size.y/2;
    float worldRight = world.position.x + world.size.x/2;
    float worldLeft = world.position.x - world.size.x/2;
    float worldBot = world.position.y - world.size.y/2;
    
    if(playerBot >= worldTop)   return true;
    if(playerTop <= worldBot)   return true;
    if(playerLeft >= worldRight) return true;
    if(playerRight <= worldLeft) return true;
    
    if(playerRight >= worldLeft && playerBot < worldTop) {
        x_distance = player.position.x - world.position.x;
        penetration = fabs(x_distance + player.size.x/2 + world.size.x/2);
        adjustX = penetration;
        return false;
    }
    return true;
}


bool collisionXRight(Entity world, Entity player){
    float playerBot = player.position.y - player.size.y/2;
    float playerRight = player.position.x + player.size.x/2;
    float playerLeft = player.position.x - player.size.x/2;
    float playerTop = player.position.y + player.size.y/2;
    float worldTop = world.position.y + world.size.y/2;
    float worldRight = world.position.x + world.size.x/2;
    float worldLeft = world.position.x - world.size.x/2;
    float worldBot = world.position.y - world.size.y/2;
    
    if(playerBot >= worldTop)   return true;
    if(playerTop <= worldBot)   return true;
    if(playerLeft >= worldRight) return true;
    if(playerRight <= worldLeft) return true;
    
    if(playerRight >= worldLeft && playerBot < worldTop) {
        x_distance = player.position.x - world.position.x;
        penetration = fabs(x_distance + player.size.x/2 + world.size.x/2);
        adjustX = penetration;
        return false;
    }
    return true;
}

bool collisionXLeft(Platform world, Entity player){
    float playerBot = player.position.y - player.size.y/2;
    float playerRight = player.position.x + player.size.x/2;
    float playerLeft = player.position.x - player.size.x/2;
    float playerTop = player.position.y + player.size.y/2;
    float worldTop = world.position.y + world.size.y/2;
    float worldRight = world.position.x + world.size.x/2;
    float worldLeft = world.position.x - world.size.x/2;
    float worldBot = world.position.y - world.size.y/2;
    
    if(playerBot >= worldTop)   return true;
    if(playerTop <= worldBot)   return true;
    if(playerLeft >= worldRight) return true;
    if(playerRight <= worldLeft) return true;
    
    if(playerLeft <= worldRight && playerBot < worldTop) {
        x_distance = world.position.x- player.position.x;
        penetration = fabs(x_distance + player.size.x/2 + world.size.x/2);
        adjustX = penetration;
        return false;
    }
    return true;
}

bool collisionXLeft(Entity world, Entity player){
    float playerBot = player.position.y - player.size.y/2;
    float playerRight = player.position.x + player.size.x/2;
    float playerLeft = player.position.x - player.size.x/2;
    float playerTop = player.position.y + player.size.y/2;
    float worldTop = world.position.y + world.size.y/2;
    float worldRight = world.position.x + world.size.x/2;
    float worldLeft = world.position.x - world.size.x/2;
    float worldBot = world.position.y - world.size.y/2;
    
    if(playerBot >= worldTop)   return true;
    if(playerTop <= worldBot)   return true;
    if(playerLeft >= worldRight) return true;
    if(playerRight <= worldLeft) return true;
    
    if(playerLeft <= worldRight && playerBot < worldTop) {
        x_distance = world.position.x- player.position.x;
        penetration = fabs(x_distance + player.size.x/2 + world.size.x/2);
        adjustX = penetration;
        return false;
    }
    return true;
}
//-----------------------------------------------------------------------------------------

SDL_Window* displayWindow;

int main(int argc, char *argv[])
{
    SDL_Init(SDL_INIT_VIDEO);
    displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 1024, 576, SDL_WINDOW_OPENGL);
    SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
    SDL_GL_MakeCurrent(displayWindow, context);
#ifdef _WINDOWS
    glewInit();
#endif
    
    ShaderProgram program(RESOURCE_FOLDER"vertex_textured.glsl", RESOURCE_FOLDER"fragment_textured.glsl");
    
    Matrix projectionMatrix;
    Matrix modelMatrixBackGround;
    Matrix modelMatrixBackGround2;
    Matrix modelMatrixBackGround3;
    Matrix modelMatrixGameName;
    Matrix modelMatrixPressButton;
    Matrix modelMatrixPause;
    Matrix modelMatrixPause2;
    Matrix modelMatrixPlayer;
    Matrix modelMatrixPlayer2;
    Matrix modelMatrixPlayer3;
    Matrix modelMatrixEnemy1;
    Matrix modelMatrixEnemy2;
    Matrix modelMatrixEnemy3;
    Matrix modelMatrixEnemy4;
    Matrix modelMatrixEnemy5;
    Matrix modelMatrixEnemy6;
    Matrix modelMatrixEnemy7;
    Matrix modelMatrixEnemy8;
    Matrix modelMatrixSaw17;
    Matrix modelMatrixSaw18;
    Matrix modelMatrixSaw32;
    Matrix modelMatrixSaw33;
    Matrix modelMatrixSaw34;
    Matrix modelMatrixSaw35;
    Matrix modelMatrixSaw36;
    Matrix modelMatrixSaw37;
    Matrix modelMatrixSaw41;
    Matrix modelMatrixSaw42;
    Matrix modelMatrixSaw43;
    Matrix modelMatrixSaw44;
    Matrix modelMatrixSaw;
    Matrix modelMatrixStones;
    Matrix modelMatrixPlatform27;
    Matrix modelMatrixPlatform35;
    Matrix modelMatrixPlatform36;
    Matrix modelMatrixPlatform37;
    Matrix modelMatrixPlatform38;
    Matrix modelMatrixRuby;
    Matrix modelMatrixScoreHealth;
    Matrix modelMatrixScoreHealth2;
    Matrix modelMatrixGameOver;
    Matrix modelMatrixWin;
    Matrix modelMatrixEndScore;
    Matrix viewMatrix;
    
    //Reposition the position of state menu text
    modelMatrixGameName.Translate(-0.5, 0.5, 0.0);
    modelMatrixPause.Translate(-2.0, 0.5, 0.0);
    modelMatrixPause2.Translate(-2.5, 0.5, 0.0);
    modelMatrixPressButton.Translate(-2.2, -1.0, 0.0);
    modelMatrixGameOver.Translate(-1.5, 0.5, 0.0);
    modelMatrixWin.Translate(-1.0, 0.5, 0.0);
    modelMatrixEndScore.Translate(-1.25, -.25, 0.0);
    
    //Reposition score/health
    modelMatrixScoreHealth.Translate(0.5, -9.5, 0.0);
    modelMatrixScoreHealth2.Translate(3.0, -3.25, 0.0);
    
    
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    
    Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 4096);
    
    projectionMatrix.setOrthoProjection(-7.11, 7.11, -4.0f, 4.0f, -1.0f, 1.0f);
    glUseProgram(program.programID);
  
    GLuint spriteSheet = LoadTexture("platformertiles.png");
    GLuint characterSheet = LoadTexture("characters_3.png");
    GLuint fontTexture = LoadTexture("pixel_font.png");
    GLuint rubyTexture = LoadTexture("ruby2.png");
    GLuint fireTexture = LoadTexture("CampFireFinished.png");
    GLuint smallSawTexture = LoadTexture("SawSmall.png");
    GLuint fullHeartTexture = LoadTexture("heart_full.png");
    GLuint emptyHeartTexture = LoadTexture("heart_empty.png");
    GLuint stoneTexture = LoadTexture("stone.png");
    GLuint halfstoneTexture = LoadTexture("stoneHalf.png");
    GLuint goldBoxTexture = LoadTexture("boxItemAlt.png");
    GLuint coinBoxTexture = LoadTexture("boxCoinAlt.png");
    
    
    Mix_Chunk *buttonPress;
    buttonPress = Mix_LoadWAV("buttonpress.wav");
    
    Mix_Chunk *jumpSound;
    jumpSound = Mix_LoadWAV("jump.wav");
    Mix_VolumeChunk(jumpSound, 50);
    
    Mix_Chunk *hitSound;
    hitSound = Mix_LoadWAV("hit.wav");
    Mix_VolumeChunk(hitSound, 25);
    
    Mix_Chunk *fireHitSound;
    fireHitSound = Mix_LoadWAV("firehit.wav");
    Mix_VolumeChunk(fireHitSound, 5);
    
    Mix_Chunk *pickUpSound;
    pickUpSound = Mix_LoadWAV("pickup.wav");
    Mix_VolumeChunk(pickUpSound, 40);
    
    Mix_Chunk *winSound;
    winSound = Mix_LoadWAV("winMusic.wav");
    
    Mix_Chunk *loseSound;
    loseSound = Mix_LoadWAV("loseMusic.wav");
    
    Mix_Music *Level1_music;
    Level1_music = Mix_LoadMUS("Road_to_Dazir.wav");
    
    Mix_Music *Level2_music;
    Level2_music = Mix_LoadMUS("music_jewels.wav");
    
    Mix_Music *Level3_music;
    Level3_music = Mix_LoadMUS("soliloquy.wav");

    //Play level 1 music
    Mix_PlayMusic(Level1_music, -1);
    
    
    //The first tile of spritesheet starts with 0.
    for(int i = 0; i < 25; i++) {
        for(int j = 0; j < 130; j++){
            levelData[i][j] -= 1;
        }
    }
    
    for(int i = 0; i < 150; i++) {
        for(int j = 0; j < 40; j++){
            levelData2[i][j] -= 1;
        }
    }
    
    for(int i = 0; i < 150; i++) {
        for(int j = 0; j < 62; j++){
            levelData3[i][j] -= 1;
        }
    }
    
    
    //Score position
    Vector3 scorePostion(0.5, -9.5, 0.0);
    Vector3 scoreVelocity(0.0f, 0.0f, 0.0f);
    Vector3 scoreSize(0.0f, 0.0f, 0.0f);
    Entity* score_temp = new Entity(scorePostion, scoreVelocity, scoreSize);
    
    //----------------------------
    
    //Player
    Vector3 playerPosition(7.25f, -6.75f, 0.0f);
    Vector3 playerVelocity(0.0f, 0.0f, 0.0f);
    Vector3 playerSize(0.5f, 0.5f, 0.0f);
    Entity* player = new Entity(playerPosition, playerVelocity, playerSize);
    
    //Player Level2
    Vector3 player2Position(10.0f, -5.f, 0.0f);
    Vector3 player2Velocity(0.0f, 0.0f, 0.0f);
    Vector3 player2Size(0.5f, 0.5f, 0.0f);
    Entity* player2 = new Entity(player2Position, player2Velocity, player2Size);
    
    //Player Level3
    Vector3 player3Position(7.25, -65.25f, 0.0f);
    Vector3 player3Velocity(0.0f, 0.0f, 0.0f);
    Vector3 player3Size(0.5f, 0.5f, 0.0f);
    Entity* player3 = new Entity(player3Position, player3Velocity, player3Size);
    
    //----------------------------
    
    //Enemies
    Vector3 enemy1Position(18.25f, -6.75f, 0.0f);
    Vector3 enemy1Velocity(1.5f, .0f, 0.0f);
    Vector3 enemy1Size(0.1f, 0.1f, 0.0f);
    Entity* enemy1 = new Entity(enemy1Position, enemy1Velocity, enemy1Size);
    
    Vector3 enemy2Position(24.25, -6.75f, 0.0f);
    Vector3 enemy2Velocity(-1.5f, 0.0f, 0.0f);
    Vector3 enemy2Size(0.1f, 0.1f, 0.0f);
    Entity* enemy2 = new Entity(enemy2Position, enemy2Velocity, enemy2Size);
    
    Vector3 enemy3Position(26.25, -4.25, 0.0f);
    Vector3 enemy3Velocity(0.02f, 0.0f, 0.0f);
    Vector3 enemy3Size(0.1f, 0.5f, 0.0f);
    Entity* enemy3 = new Entity(enemy3Position, enemy3Velocity, enemy3Size);
    
    Vector3 enemy4Position(31.75, -5.0, 0.0f);
    Vector3 enemy4Velocity(1.85f, 0.0f, 0.0f);
    Vector3 enemy4Size(0.1f, 0.1f, 0.0f);
    Entity* enemy4 = new Entity(enemy4Position, enemy4Velocity, enemy4Size);
    
    Vector3 enemy5Position(43.75, -5.25, 0.0f);
    Vector3 enemy5Velocity(1.5f, 0.0f, 0.0f);
    Vector3 enemy5Size(0.5f, 0.5f, 0.0f);
    Entity* enemy5 = new Entity(enemy5Position, enemy5Velocity, enemy5Size);
    
    Vector3 enemy6Position(47.25, -5.25, 0.0f);
    Vector3 enemy6Velocity(1.75f, 0.0f, 0.0f);
    Vector3 enemy6Size(0.05f, 0.05f, 0.0f);
    Entity* enemy6 = new Entity(enemy6Position, enemy6Velocity, enemy6Size);
    
    Vector3 enemy7Position(44.25, -5.25, 0.0f);
    Vector3 enemy7Velocity(1.75f, 0.0f, 0.0f);
    Vector3 enemy7Size(0.05f, 0.05f, 0.0f);
    Entity* enemy7 = new Entity(enemy7Position, enemy7Velocity, enemy7Size);
    
    Vector3 enemy8Position(48.25, -5.25, 0.0f);
    Vector3 enemy8Velocity(-1.5f, 0.0f, 0.0f);
    Vector3 enemy8Size(0.05f, 0.05f, 0.0f);
    Entity* enemy8 = new Entity(enemy8Position, enemy8Velocity, enemy8Size);
    
    //----------------------------
    
    Vector3 fire2Position(37.75, -4.25, 0.0f);
    Vector3 fire2Velocity(0.02f, 0.0f, 0.0f);
    Vector3 fire2Size(0.05f, 0.5f, 0.0f);
    Entity* fire2 = new Entity(fire2Position, fire2Velocity, fire2Size);
    
    Vector3 fire3Position(38.75, -4.25, 0.0f);
    Vector3 fire3Velocity(0.02f, 0.0f, 0.0f);
    Vector3 fire3Size(0.05f, 0.5f, 0.0f);
    Entity* fire3 = new Entity(fire3Position, fire3Velocity, fire3Size);
    
    Vector3 fire4Position(39.75, -4.25, 0.0f);
    Vector3 fire4Velocity(0.02f, 0.0f, 0.0f);
    Vector3 fire4Size(0.05f, 0.5f, 0.0f);
    Entity* fire4 = new Entity(fire4Position, fire4Velocity, fire4Size);
    
    Vector3 fire5Position(44.25, -2.75, 0.0f);
    Vector3 fire5Velocity(0.02f, 0.0f, 0.0f);
    Vector3 fire5Size(0.05f, 0.5f, 0.0f);
    Entity* fire5 = new Entity(fire5Position, fire5Velocity, fire5Size);
    
    Vector3 fire6Position(15.75, -4.75, 0.0f);
    Vector3 fire6Velocity(0.02f, 0.0f, 0.0f);
    Vector3 fire6Size(0.05f, 0.5f, 0.0f);
    Entity* fire6 = new Entity(fire6Position, fire6Velocity, fire6Size);
    
    Vector3 fire7Position(42.25, -5.25, 0.0f);
    Vector3 fire7Velocity(0.02f, 0.0f, 0.0f);
    Vector3 fire7Size(0.25f, 0.5f, 0.0f);
    Entity* fire7 = new Entity(fire7Position, fire7Velocity, fire7Size);
    
    //----------------------------
    
    //Level 1 Platforms
    Vector3 platform1Position(5.5, -9.5, 0.0);
    Vector3 platform1Size(10.5, 5.0, 0.0);
    Platform* platform1 = new Platform(platform1Position, platform1Size);
    
    Vector3 platform2Position(10.85, -6.75, 0.0);
    Vector3 platform2Size(0.5, 0.5, 0.0);
    Platform* platform2 = new Platform(platform2Position, platform2Size);
    
    Vector3 platform3Position(11.35, -6.25, 0.0);
    Vector3 platform3Size(0.5, 0.5, 0.0);
    Platform* platform3 = new Platform(platform3Position, platform3Size);
    
    Vector3 platform4Position(11.75, -5.75, 0.0);
    Vector3 platform4Size(0.3, 0.5, 0.0);
    Platform* platform4 = new Platform(platform4Position, platform4Size);
    
    Vector3 platform5Position(13.25, -5.5, 0.0);
    Vector3 platform5Size(1.0, 1.0, 0.0);
    Platform* platform5 = new Platform(platform5Position, platform5Size);
    
    Vector3 platform6Position(15.25, -5.5, 0.0);
    Vector3 platform6Size(1.0, 1.0, 0.0);
    Platform* platform6 = new Platform(platform6Position, platform6Size);
    
    Vector3 platform7Position(20.75, -9.5, 0.0);
    Vector3 platform7Size(8.7, 5.0, 0.0);
    Platform* platform7 = new Platform(platform7Position, platform7Size);
    
    Vector3 platform8Position(26.16, -6.75, 0.0);
    Vector3 platform8Size(2.1, 0.5, 0.0);
    Platform* platform8 = new Platform(platform8Position, platform8Size);
    
    Vector3 platform9Position(29.2, -6.25, 0.0);
    Vector3 platform9Size(3.2, 0.5, 0.0);
    Platform* platform9 = new Platform(platform9Position, platform9Size);
    
    Vector3 platform10Position(32.45, -5.75, 0.0);
    Vector3 platform10Size(2.5, 0.5, 0.0);
    Platform* platform10 = new Platform(platform10Position, platform10Size);
    
    Vector3 platform11Position(34.2, -5.25, 0.0);
    Vector3 platform11Size(0.15, 0.5, 0.0);
    Platform* platform11 = new Platform(platform11Position, platform11Size);
    
    Vector3 platform12Position(34.70, -4.75, 0.0);
    Vector3 platform12Size(0.15, 0.5, 0.0);
    Platform* platform12 = new Platform(platform12Position, platform12Size);
    
    Vector3 platform13Position(35.45, -4.25, 0.0);
    Vector3 platform13Size(0.65, 0.5, 0.0);
    Platform* platform13 = new Platform(platform13Position, platform13Size);
    
    Vector3 platform14Position(38.7, -8.0, 0.0);
    Vector3 platform14Size(3.15, 7.0, 0.0);
    Platform* platform14 = new Platform(platform14Position, platform14Size);
    
    Vector3 platform15Position(41.5, -4.25, 0.0);
    Vector3 platform15Size(0.65, 0.5, 0.0);
    Platform* platform15 = new Platform(platform15Position, platform15Size);
    
    Vector3 platform16Position(42.7, -3.75, 0.0);
    Vector3 platform16Size(0.2, 0.5, 0.0);
    Platform* platform16 = new Platform(platform16Position, platform16Size);
    
    Vector3 platform17Position(44.2, -3.25, 0.0);
    Vector3 platform17Size(1.1, 0.5, 0.0);
    Platform* platform17 = new Platform(platform17Position, platform17Size);
    
    Vector3 platform18Position(47.25, -2.75, 0.0);
    Vector3 platform18Size(3.2, 0.5, 0.0);
    Platform* platform18 = new Platform(platform18Position, platform18Size);
    
    Vector3 platform19Position(46.2, -5.75, 0.0);
    Vector3 platform19Size(9.1, 0.5, 0.0);
    Platform* platform19 = new Platform(platform19Position, platform19Size);
    
    Vector3 platform20Position(52.2, -9.0, 0.0);
    Vector3 platform20Size(1.15, 5.0, 0.0);
    Platform* platform20 = new Platform(platform20Position, platform20Size);
    
    //Invisible world objects
    Vector3 invis1Position(16.25, -6.75, 0.0);
    Vector3 invis1Size(0.5, 0.5, 0.0);
    Platform* invis1 = new Platform(invis1Position, invis1Size);
    
    Vector3 invisPlat1Position(26.17, -4.75, 0.0);
    Vector3 invisPlat1Size(1.2, 0.5, 0.0);
    Platform* invisPlat1 = new Platform(invisPlat1Position, invisPlat1Size);
    
    Vector3 invis2Position(25.6, -4.25, 0.0);
    Vector3 invis2Size(0.25, 0.5, 0.0);
    Platform* invis2 = new Platform(invis2Position, invis2Size);
    
    Vector3 invis3Position(27.0, -4.25, 0.0);
    Vector3 invis3Size(0.25, 0.5, 0.0);
    Platform* invis3 = new Platform(invis3Position, invis3Size);

    Vector3 invis4Position(31.0, -5.75, 0.0);
    Vector3 invis4Size(0.25, 0.5, 0.0);
    Platform* invis4 = new Platform(invis4Position, invis4Size);
    
    Vector3 invis5Position(27.5, -5.75, 0.0);
    Vector3 invis5Size(0.25, 0.5, 0.0);
    Platform* invis5 = new Platform(invis5Position, invis5Size);
    
    Vector3 invis6Position(31.0, -5.25, 0.0);
    Vector3 invis6Size(0.25, 0.5, 0.0);
    Platform* invis6 = new Platform(invis6Position, invis6Size);
    
    Vector3 invis7Position(34.0, -5.25, 0.0);
    Vector3 invis7Size(0.25, 0.5, 0.0);
    Platform* invis7 = new Platform(invis7Position, invis7Size);
    
    Vector3 invis8Position(51.0, -5.25, 0.0);
    Vector3 invis8Size(0.25, 0.5, 0.0);
    Platform* invis8 = new Platform(invis8Position, invis8Size);
    
    Vector3 invis9Position(46.25, -5.25, 0.0);
    Vector3 invis9Size(0.25, 0.5, 0.0);
    Platform* invis9 = new Platform(invis9Position, invis9Size);
    
    //Vector contains all platforms player needs to test bottom collision with for level 1
    vector<Platform> Level1Y;
    Level1Y.push_back(*platform1);
    Level1Y.push_back(*platform2);
    Level1Y.push_back(*platform3);
    Level1Y.push_back(*platform4);
    Level1Y.push_back(*platform5);
    Level1Y.push_back(*platform6);
    Level1Y.push_back(*platform7);
    Level1Y.push_back(*platform8);
    Level1Y.push_back(*platform9);
    Level1Y.push_back(*platform10);
    Level1Y.push_back(*platform11);
    Level1Y.push_back(*platform12);
    Level1Y.push_back(*platform13);
    Level1Y.push_back(*platform14);
    Level1Y.push_back(*platform15);
    Level1Y.push_back(*platform16);
    Level1Y.push_back(*platform17);
    Level1Y.push_back(*platform18);
    Level1Y.push_back(*platform19);
    Level1Y.push_back(*platform20);
    Level1Y.push_back(*invisPlat1);
    
    //Vector contains all platforms player needs to test right collision with for level 1
    vector<Platform> Level1X;
    Level1X.push_back(*platform2);
    Level1X.push_back(*platform3);
    Level1X.push_back(*platform4);
    Level1X.push_back(*platform8);
    Level1X.push_back(*platform9);
    Level1X.push_back(*platform10);
    Level1X.push_back(*platform11);
    Level1X.push_back(*platform12);
    Level1X.push_back(*platform13);
    Level1X.push_back(*platform14);
    Level1X.push_back(*platform15);
    Level1X.push_back(*platform16);
    Level1X.push_back(*platform17);
    Level1X.push_back(*platform18);
    Level1X.push_back(*platform19);
    Level1X.push_back(*platform20);


    //Items
    Vector3 item1Position(12.225, -4.675, 0.0);
    Vector3 item1Size(0.1, 0.1, 0.0);
    Item* item1 = new Item(item1Position, item1Size, true);

    Vector3 item2Position(14.225, -4.2, 0.0);
    Vector3 item2Size(0.1, 0.1, 0.0);
    Item* item2 = new Item(item2Position, item2Size, true);
    
    Vector3 item3Position(16.225, -4.2, 0.0);
    Vector3 item3Size(0.1, 0.1, 0.0);
    Item* item3 = new Item(item3Position, item3Size, true);
    
    Vector3 item4Position(16.625, -4.675, 0.0);
    Vector3 item4Size(0.1, 0.1, 0.0);
    Item* item4 = new Item(item4Position, item4Size, true);
    
    Vector3 item5Position(17.025, -4.975, 0.0);
    Vector3 item5Size(0.1, 0.1, 0.0);
    Item* item5 = new Item(item5Position, item5Size, true);
    
    Vector3 item6Position(25.225, -6.275, 0.0);
    Vector3 item6Size(0.1, 0.1, 0.0);
    Item* item6 = new Item(item6Position, item6Size, true);
    
    Vector3 item7Position(25.625, -6.275, 0.0);
    Vector3 item7Size(0.1, 0.1, 0.0);
    Item* item7 = new Item(item7Position, item7Size, true);
    
    Vector3 item8Position(26.25, -6.275, 0.0);
    Vector3 item8Size(0.1, 0.1, 0.0);
    Item* item8 = new Item(item8Position, item8Size, true);
    
    Vector3 item9Position(26.65, -6.275, 0.0);
    Vector3 item9Size(0.1, 0.1, 0.0);
    Item* item9 = new Item(item9Position, item9Size, true);
    
    Vector3 item10Position(27.05, -6.275, 0.0);
    Vector3 item10Size(0.1, 0.1, 0.0);
    Item* item10 = new Item(item10Position, item10Size, true);
    
    Vector3 item11Position(27.45, -6.275, 0.0);
    Vector3 item11Size(0.1, 0.1, 0.0);
    Item* item11 = new Item(item11Position, item11Size, true);
    
    Vector3 item12Position(36.325, -2.875, 0.0);
    Vector3 item12Size(0.1, 0.1, 0.0);
    Item* item12 = new Item(item12Position, item12Size, true);
    
    Vector3 item13Position(36.825, -3.275, 0.0);
    Vector3 item13Size(0.1, 0.1, 0.0);
    Item* item13 = new Item(item13Position, item13Size, true);
    
    Vector3 item14Position(37.325, -3.675, 0.0);
    Vector3 item14Size(0.1, 0.1, 0.0);
    Item* item14 = new Item(item14Position, item14Size, true);
    
    Vector3 item15Position(42.775, -3.275, 0.0);
    Vector3 item15Size(0.1, 0.1, 0.0);
    Item* item15 = new Item(item15Position, item15Size, true);
    
    Vector3 item16Position(42.775, -5.275, 0.0);
    Vector3 item16Size(0.1, 0.1, 0.0);
    Item* item16 = new Item(item16Position, item16Size, true);
    
    Vector3 item17Position(43.275, -5.275, 0.0);
    Vector3 item17Size(0.1, 0.1, 0.0);
    Item* item17 = new Item(item17Position, item17Size, true);
    
    Vector3 item18Position(43.775, -5.275, 0.0);
    Vector3 item18Size(0.1, 0.1, 0.0);
    Item* item18 = new Item(item18Position, item18Size, true);
    
    Vector3 item19Position(44.275, -5.275, 0.0);
    Vector3 item19Size(0.1, 0.1, 0.0);
    Item* item19 = new Item(item19Position, item19Size, true);
    
    Vector3 item20Position(44.775, -5.275, 0.0);
    Vector3 item20Size(0.1, 0.1, 0.0);
    Item* item20 = new Item(item20Position, item20Size, true);
    
    Vector3 item21Position(45.275, -5.275, 0.0);
    Vector3 item21Size(0.1, 0.1, 0.0);
    Item* item21 = new Item(item21Position, item21Size, true);
    
    Vector3 item22Position(45.775, -5.275, 0.0);
    Vector3 item22Size(0.1, 0.1, 0.0);
    Item* item22 = new Item(item22Position, item22Size, true);
    
    //Level 2----------------------------------------------------
    
    //Right wall
    Vector3 platform21Position(3.425, -32.75, 0.0);
    Vector3 platform21Size(6.9, 65.5, 0.0);
    Platform* platform21 = new Platform(platform21Position, platform21Size);
    
    //Left wall
    Vector3 platform22Position(16.525, -30.125, 0.0);
    Vector3 platform22Size(6.85, 60.25, 0.0);
    Platform* platform22 = new Platform(platform22Position, platform22Size);
    
    //Bottom floor
    Vector3 platform23Position(13.25, -67.75, 0.0);
    Vector3 platform23Size(13.5, 4.5, 0.0);
    Platform* platform23 = new Platform(platform23Position, platform23Size);
    
    //Saw
    Vector3 saw1Position(7.75, -12.0, 0.0f);
    Vector3 saw1Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw1Size(0.75f, 0.75f, 0.0f);
    Entity* saw1 = new Entity(saw1Position, saw1Velocity, saw1Size);
    
    Vector3 saw2Position(8.75, -13.0, 0.0f);
    Vector3 saw2Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw2Size(0.75f, 0.75f, 0.0f);
    Entity* saw2 = new Entity(saw2Position, saw2Velocity, saw2Size);
    
    Vector3 saw3Position(9.75, -14.0, 0.0f);
    Vector3 saw3Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw3Size(0.75f, 0.75f, 0.0f);
    Entity* saw3 = new Entity(saw3Position, saw3Velocity, saw3Size);
    
    Vector3 saw4Position(10.75, -15.0, 0.0f);
    Vector3 saw4Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw4Size(0.75f, 0.75f, 0.0f);
    Entity* saw4 = new Entity(saw4Position, saw4Velocity, saw4Size);
    
    Vector3 saw5Position(7.75, -19.0, 0.0f);
    Vector3 saw5Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw5Size(0.75f, 0.75f, 0.0f);
    Entity* saw5 = new Entity(saw5Position, saw5Velocity, saw5Size);
    
    Vector3 saw6Position(9.0, -19.0, 0.0f);
    Vector3 saw6Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw6Size(0.75f, 0.75f, 0.0f);
    Entity* saw6 = new Entity(saw6Position, saw6Velocity, saw6Size);
    
    Vector3 saw7Position(11.0, -19.0, 0.0f);
    Vector3 saw7Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw7Size(0.75f, 0.75f, 0.0f);
    Entity* saw7 = new Entity(saw7Position, saw7Velocity, saw7Size);
    
    Vector3 saw8Position(12.25, -19.0, 0.0f);
    Vector3 saw8Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw8Size(0.75f, 0.75f, 0.0f);
    Entity* saw8 = new Entity(saw8Position, saw8Velocity, saw8Size);
    
    Vector3 saw9Position(7.75, -22.0, 0.0f);
    Vector3 saw9Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw9Size(0.75f, 0.75f, 0.0f);
    Entity* saw9 = new Entity(saw9Position, saw9Velocity, saw9Size);
    
    Vector3 saw10Position(9.0, -22.0, 0.0f);
    Vector3 saw10Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw10Size(0.75f, 0.75f, 0.0f);
    Entity* saw10 = new Entity(saw10Position, saw10Velocity, saw10Size);
    
    Vector3 saw11Position(10.25, -22.0, 0.0f);
    Vector3 saw11Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw11Size(0.75f, 0.75f, 0.0f);
    Entity* saw11 = new Entity(saw11Position, saw11Velocity, saw11Size);
    
    Vector3 saw12Position(12.25, -22.0, 0.0f);
    Vector3 saw12Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw12Size(0.75f, 0.75f, 0.0f);
    Entity* saw12 = new Entity(saw12Position, saw12Velocity, saw12Size);
    
    Vector3 saw13Position(7.25, -25.0, 0.0f);
    Vector3 saw13Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw13Size(0.75f, 0.75f, 0.0f);
    Entity* saw13 = new Entity(saw13Position, saw13Velocity, saw13Size);
    
    Vector3 saw14Position(9.0, -25.0, 0.0f);
    Vector3 saw14Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw14Size(0.75f, 0.75f, 0.0f);
    Entity* saw14 = new Entity(saw14Position, saw14Velocity, saw14Size);
    
    Vector3 saw15Position(10.25, -25.0, 0.0f);
    Vector3 saw15Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw15Size(0.75f, 0.75f, 0.0f);
    Entity* saw15 = new Entity(saw15Position, saw15Velocity, saw15Size);
    
    Vector3 saw16Position(11.5, -25.0, 0.0f);
    Vector3 saw16Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw16Size(0.75f, 0.75f, 0.0f);
    Entity* saw16 = new Entity(saw16Position, saw16Velocity, saw16Size);
    
    Vector3 saw17Position(7.75, -28.0, 0.0f);
    Vector3 saw17Velocity(1.0f, 0.0f, 0.0f);
    Vector3 saw17Size(0.75f, 0.75f, 0.0f);
    Entity* saw17 = new Entity(saw17Position, saw17Velocity, saw17Size);
    
    Vector3 saw18Position(12.25, -28.0, 0.0f);
    Vector3 saw18Velocity(-1.0f, 0.0f, 0.0f);
    Vector3 saw18Size(0.75f, 0.75f, 0.0f);
    Entity* saw18 = new Entity(saw18Position, saw18Velocity, saw18Size);
    
    Vector3 saw19Position(12.25, -32.0, 0.0f);
    Vector3 saw19Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw19Size(0.75f, 0.75f, 0.0f);
    Entity* saw19 = new Entity(saw19Position, saw19Velocity, saw19Size);
    
    Vector3 saw20Position(11.25, -33.0, 0.0f);
    Vector3 saw20Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw20Size(0.75f, 0.75f, 0.0f);
    Entity* saw20 = new Entity(saw20Position, saw20Velocity, saw20Size);
    
    Vector3 saw21Position(10.25, -32.0, 0.0f);
    Vector3 saw21Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw21Size(0.75f, 0.75f, 0.0f);
    Entity* saw21 = new Entity(saw21Position, saw21Velocity, saw21Size);
    
    Vector3 saw22Position(9.0, -32.0, 0.0f);
    Vector3 saw22Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw22Size(0.75f, 0.75f, 0.0f);
    Entity* saw22 = new Entity(saw22Position, saw22Velocity, saw22Size);
    
    Vector3 saw23Position(8.5, -33.0, 0.0f);
    Vector3 saw23Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw23Size(0.75f, 0.75f, 0.0f);
    Entity* saw23 = new Entity(saw23Position, saw23Velocity, saw23Size);
    
    Vector3 saw24Position(8.85, -34.25, 0.0f);
    Vector3 saw24Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw24Size(0.75f, 0.75f, 0.0f);
    Entity* saw24 = new Entity(saw24Position, saw24Velocity, saw24Size);
    
    Vector3 saw25Position(8.5, -35.5, 0.0f);
    Vector3 saw25Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw25Size(0.75f, 0.75f, 0.0f);
    Entity* saw25 = new Entity(saw25Position, saw25Velocity, saw25Size);
   
    Vector3 saw26Position(7.75, -37.5, 0.0f);
    Vector3 saw26Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw26Size(0.75f, 0.75f, 0.0f);
    Entity* saw26 = new Entity(saw26Position, saw26Velocity, saw26Size);
    
    Vector3 saw27Position(8.75, -38.5, 0.0f);
    Vector3 saw27Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw27Size(0.75f, 0.75f, 0.0f);
    Entity* saw27 = new Entity(saw27Position, saw27Velocity, saw27Size);
    
    Vector3 saw28Position(10.75, -38.5, 0.0f);
    Vector3 saw28Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw28Size(0.75f, 0.75f, 0.0f);
    Entity* saw28 = new Entity(saw28Position, saw28Velocity, saw28Size);
    
    Vector3 saw29Position(10.75, -39.75, 0.0f);
    Vector3 saw29Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw29Size(0.75f, 0.75f, 0.0f);
    Entity* saw29 = new Entity(saw29Position, saw29Velocity, saw29Size);
    
    Vector3 saw30Position(10.75, -41.0, 0.0f);
    Vector3 saw30Velocity(0.0f, 0.0f, 0.0f);
    Vector3 saw30Size(0.75f, 0.75f, 0.0f);
    Entity* saw30 = new Entity(saw30Position, saw30Velocity, saw30Size);
    
    Vector3 saw32Position(7.75, -43.0, 0.0f);
    Vector3 saw32Velocity(1.75f, 0.0f, 0.0f);
    Vector3 saw32Size(0.75f, 0.75f, 0.0f);
    Entity* saw32 = new Entity(saw32Position, saw32Velocity, saw32Size);
    
    Vector3 saw33Position(12.25, -43.0, 0.0f);
    Vector3 saw33Velocity(-1.75f, 0.0f, 0.0f);
    Vector3 saw33Size(0.75f, 0.75f, 0.0f);
    Entity* saw33 = new Entity(saw33Position, saw33Velocity, saw33Size);
    
    Vector3 saw34Position(7.25, -45.0, 0.0f);
    Vector3 saw34Velocity(2.75f, 0.0f, 0.0f);
    Vector3 saw34Size(0.75f, 0.75f, 0.0f);
    Entity* saw34 = new Entity(saw34Position, saw34Velocity, saw34Size);
    
    Vector3 saw35Position(12.25, -46.25, 0.0f);
    Vector3 saw35Velocity(-2.75f, 0.0f, 0.0f);
    Vector3 saw35Size(0.75f, 0.75f, 0.0f);
    Entity* saw35 = new Entity(saw35Position, saw35Velocity, saw35Size);
    
    Vector3 saw36Position(10.15, -53.0, 0.0f);
    Vector3 saw36Velocity(0.0f, -3.5f, 0.0f);
    Vector3 saw36Size(0.75f, 0.75f, 0.0f);
    Entity* saw36 = new Entity(saw36Position, saw36Velocity, saw36Size);
    
    Vector3 saw37Position(7.75, -54.5, 0.0f);
    Vector3 saw37Velocity(0.0f, -3.0f, 0.0f);
    Vector3 saw37Size(0.75f, 0.75f, 0.0f);
    Entity* saw37 = new Entity(saw37Position, saw37Velocity, saw37Size);
    
    Vector3 saw38Position(9.0, -54.5, 0.0f);
    Vector3 saw38Velocity(0.0f, -3.0f, 0.0f);
    Vector3 saw38Size(0.75f, 0.75f, 0.0f);
    Entity* saw38 = new Entity(saw38Position, saw38Velocity, saw38Size);
    
    Vector3 saw39Position(11.0, -54.5, 0.0f);
    Vector3 saw39Velocity(0.0f, -3.0f, 0.0f);
    Vector3 saw39Size(0.75f, 0.75f, 0.0f);
    Entity* saw39 = new Entity(saw39Position, saw39Velocity, saw39Size);
    
    Vector3 saw40Position(12.25, -54.5, 0.0f);
    Vector3 saw40Velocity(0.0f, -3.0f, 0.0f);
    Vector3 saw40Size(0.75f, 0.75f, 0.0f);
    Entity* saw40 = new Entity(saw40Position, saw40Velocity, saw40Size);
    
    vector<Entity> saw;
    saw.push_back(*saw1);
    saw.push_back(*saw2);
    saw.push_back(*saw3);
    saw.push_back(*saw4);
    saw.push_back(*saw5);
    saw.push_back(*saw6);
    saw.push_back(*saw7);
    saw.push_back(*saw8);
    saw.push_back(*saw9);
    saw.push_back(*saw10);
    saw.push_back(*saw11);
    saw.push_back(*saw12);
    saw.push_back(*saw13);
    saw.push_back(*saw14);
    saw.push_back(*saw15);
    saw.push_back(*saw16);
    saw.push_back(*saw19);
    saw.push_back(*saw20);
    saw.push_back(*saw21);
    saw.push_back(*saw22);
    saw.push_back(*saw23);
    saw.push_back(*saw24);
    saw.push_back(*saw25);
    saw.push_back(*saw26);
    saw.push_back(*saw27);
    saw.push_back(*saw28);
    saw.push_back(*saw29);
    saw.push_back(*saw30);
    saw.push_back(*saw37);
    saw.push_back(*saw38);
    saw.push_back(*saw39);
    saw.push_back(*saw40);
    
    //Level 2 Platform
    Vector3 invis10Position(10.0, -28.0, 0.0);
    Vector3 invis10Size(0.25, 1.0, 0.0);
    Platform* invis10 = new Platform(invis10Position, invis10Size);
    
    Vector3 invis11Position(10.0, -43.0, 0.0);
    Vector3 invis11Size(0.1, 1.0, 0.0);
    Platform* invis11 = new Platform(invis11Position, invis11Size);
    
    Vector3 invis12Position(12.5, -44.5, 0.0);
    Vector3 invis12Size(0.25, 1.0, 0.0);
    Platform* invis12 = new Platform(invis12Position, invis12Size);
    
    Vector3 invis13Position(7.0, -45.75, 0.0);
    Vector3 invis13Size(0.25, 1.0, 0.0);
    Platform* invis13 = new Platform(invis13Position, invis13Size);
    
    Vector3 invis14Position(10.0, -45.5, 0.0);
    Vector3 invis14Size(1.0, 0.25, 0.0);
    Platform* invis14 = new Platform(invis14Position, invis14Size);
    
    //Level 2 Item
    Vector3 item23Position(11.275, -31.875, 0.0);
    Vector3 item23Size(0.1, 0.1, 0.0);
    Item* item23 = new Item(item23Position, item23Size, true);
    
    Vector3 item24Position(7.625, -32.875, 0.0);
    Vector3 item24Size(0.1, 0.1, 0.0);
    Item* item24 = new Item(item24Position, item24Size, true);
    
    Vector3 item25Position(7.625, -33.875, 0.0);
    Vector3 item25Size(0.1, 0.1, 0.0);
    Item* item25 = new Item(item25Position, item25Size, true);
    
    Vector3 item26Position(7.625, -34.875, 0.0);
    Vector3 item26Size(0.1, 0.1, 0.0);
    Item* item26 = new Item(item26Position, item26Size, true);
    
    Vector3 item27Position(7.625, -35.875, 0.0);
    Vector3 item27Size(0.1, 0.1, 0.0);
    Item* item27 = new Item(item27Position, item27Size, true);
    
    Vector3 item28Position(9.975, -42.825, 0.0);
    Vector3 item28Size(0.1, 0.1, 0.0);
    Item* item28 = new Item(item28Position, item28Size, true);
    
    Vector3 item29Position(9.975, -43.825, 0.0);
    Vector3 item29Size(0.1, 0.1, 0.0);
    Item* item29 = new Item(item29Position, item29Size, true);
    
    Vector3 item30Position(9.975, -44.825, 0.0);
    Vector3 item30Size(0.1, 0.1, 0.0);
    Item* item30 = new Item(item30Position, item30Size, true);
    
    Vector3 item31Position(9.975, -45.825, 0.0);
    Vector3 item31Size(0.1, 0.1, 0.0);
    Item* item31 = new Item(item31Position, item31Size, true);
    
    Vector3 item32Position(12.125, -15.025, 0.0);
    Vector3 item32Size(0.1, 0.1, 0.0);
    Item* item32 = new Item(item32Position, item32Size, true);
    
    Vector3 item33Position(12.125, -16.025, 0.0);
    Vector3 item33Size(0.1, 0.1, 0.0);
    Item* item33 = new Item(item33Position, item33Size, true);
    
    Vector3 item34Position(12.475, -24.825, 0.0);
    Vector3 item34Size(0.1, 0.1, 0.0);
    Item* item34 = new Item(item34Position, item34Size, true);
    
    Vector3 item35Position(12.475, -25.825, 0.0);
    Vector3 item35Size(0.1, 0.1, 0.0);
    Item* item35 = new Item(item35Position, item35Size, true);
    
    Vector3 item36Position(12.475, -26.825, 0.0);
    Vector3 item36Size(0.1, 0.1, 0.0);
    Item* item36 = new Item(item36Position, item36Size, true);
    
    Vector3 item37Position(12.125, -39.125, 0.0);
    Vector3 item37Size(0.1, 0.1, 0.0);
    Item* item37 = new Item(item37Position, item37Size, true);
    
    Vector3 item38Position(12.125, -40.125, 0.0);
    Vector3 item38Size(0.1, 0.1, 0.0);
    Item* item38 = new Item(item38Position, item38Size, true);
    
    Vector3 item39Position(10.125, -50.125, 0.0);
    Vector3 item39Size(0.1, 0.1, 0.0);
    Item* item39 = new Item(item39Position, item39Size, true);
    
    Vector3 item40Position(10.125, -48.125, 0.0);
    Vector3 item40Size(0.1, 0.1, 0.0);
    Item* item40 = new Item(item40Position, item40Size, true);
    
    Vector3 item41Position(10.125, -52.125, 0.0);
    Vector3 item41Size(0.1, 0.1, 0.0);
    Item* item41 = new Item(item41Position, item41Size, true);
    
    //Level 3 -------------------------------------------------
    
    //Left wall
    Vector3 platform24Position(4.57, -30.205, 0.0);
    Vector3 platform24Size(9.55, 60.41, 0.0);
    Platform* platform24 = new Platform(platform24Position, platform24Size);
    
    //Right wall
    Vector3 platform25Position(21.36, -33.30, 0.0);
    Vector3 platform25Size(5.5, 66.7, 0.0);
    Platform* platform25 = new Platform(platform25Position, platform25Size);
    
    //Bottom floor
    Vector3 platform26Position(10.0, -67.82, 0.0);
    Vector3 platform26Size(20.0, 4.6, 0.0);
    Platform* platform26 = new Platform(platform26Position, platform26Size);
    
    //Moving box
    Vector3 platform27Position(17.25, -65.25, 0.0);
    Vector3 platform27Velocity(0.0, 0.0, 0.0);
    Vector3 platform27Size(0.25, 0.5, 0.0);
    Entity* platform27 = new Entity(platform27Position, platform27Velocity, platform27Size);
    
    Vector3 platform35Position(17.25, -45.75, 0.0);
    Vector3 platform35Velocity(0.0, 0.0, 0.0);
    Vector3 platform35Size(0.25, 0.5, 0.0);
    Entity* platform35 = new Entity(platform35Position, platform35Velocity, platform35Size);
    
    Vector3 platform36Position(18.25, -39.75, 0.0);
    Vector3 platform36Velocity(0.0, 0.0, 0.0);
    Vector3 platform36Size(0.25, 0.5, 0.0);
    Entity* platform36 = new Entity(platform36Position, platform36Velocity, platform36Size);
    
    Vector3 platform37Position(9.75, -37.75, 0.0);
    Vector3 platform37Velocity(0.0, 0.0, 0.0);
    Vector3 platform37Size(0.25, 0.5, 0.0);
    Entity* platform37 = new Entity(platform37Position, platform37Velocity, platform37Size);
    
    Vector3 platform38Position(18.25, -35.75, 0.0);
    Vector3 platform38Velocity(0.0, 0.0, 0.0);
    Vector3 platform38Size(0.25, 0.5, 0.0);
    Entity* platform38 = new Entity(platform38Position, platform38Velocity, platform38Size);
    
    //Platforms
    Vector3 platform28Position(15.25, -53.25, 0.0);
    Vector3 platform28Size(0.25, 0.5, 0.0);
    Platform* platform28 = new Platform(platform28Position, platform28Size);
    
    Vector3 platform29Position(13.25, -52.25, 0.0);
    Vector3 platform29Size(0.25, 0.5, 0.0);
    Platform* platform29 = new Platform(platform29Position, platform29Size);
    
    //Large platform
    Vector3 platform30Position(10.625, -51.5, 0.0);
    Vector3 platform30Size(2.0, 1.0, 0.0);
    Platform* platform30 = new Platform(platform30Position, platform30Size);
    
    Vector3 platform31Position(12.75, -49.75, 0.0);
    Vector3 platform31Size(0.25, 0.5, 0.0);
    Platform* platform31 = new Platform(platform31Position, platform31Size);
    
    Vector3 platform32Position(14.75, -48.75, 0.0);
    Vector3 platform32Size(0.25, 0.5, 0.0);
    Platform* platform32 = new Platform(platform32Position, platform32Size);
    
    Vector3 platform33Position(12.75, -47.25, 0.0);
    Vector3 platform33Size(0.25, 0.5, 0.0);
    Platform* platform33 = new Platform(platform33Position, platform33Size);
    
    Vector3 platform34Position(14.75, -45.75, 0.0);
    Vector3 platform34Size(0.25, 0.5, 0.0);
    Platform* platform34 = new Platform(platform34Position, platform34Size);
    
    Vector3 platform39Position(12.75, -34.75, 0.0);
    Vector3 platform39Size(0.25, 0.5, 0.0);
    Platform* platform39 = new Platform(platform39Position, platform39Size);
    
    Vector3 platform40Position(11.75, -33.25, 0.0);
    Vector3 platform40Size(0.25, 0.5, 0.0);
    Platform* platform40 = new Platform(platform40Position, platform40Size);

    Vector3 platform41Position(10.75, -31.75, 0.0);
    Vector3 platform41Size(0.25, 0.5, 0.0);
    Platform* platform41 = new Platform(platform41Position, platform41Size);
    
    Vector3 platform42Position(11.75, -30.25, 0.0);
    Vector3 platform42Size(0.25, 0.5, 0.0);
    Platform* platform42 = new Platform(platform42Position, platform42Size);
    
    Vector3 platform43Position(12.75, -28.75, 0.0);
    Vector3 platform43Size(0.25, 0.5, 0.0);
    Platform* platform43 = new Platform(platform43Position, platform43Size);
    
    Vector3 platform44Position(13.75, -27.25, 0.0);
    Vector3 platform44Size(0.25, 0.5, 0.0);
    Platform* platform44 = new Platform(platform44Position, platform44Size);
    
    Vector3 platform45Position(14.75, -25.75, 0.0);
    Vector3 platform45Size(0.25, 0.5, 0.0);
    Platform* platform45 = new Platform(platform45Position, platform45Size);
    
    Vector3 platform46Position(17.375, -25.0, 0.0);
    Vector3 platform46Size(2.25, 1.0, 0.0);
    Platform* platform46 = new Platform(platform46Position, platform46Size);
    
    vector<Platform> platBot;
    platBot.push_back(*platform28);
    platBot.push_back(*platform29);
    platBot.push_back(*platform30);
    platBot.push_back(*platform31);
    platBot.push_back(*platform32);
    platBot.push_back(*platform33);
    platBot.push_back(*platform34);
    platBot.push_back(*platform39);
    platBot.push_back(*platform40);
    platBot.push_back(*platform41);
    platBot.push_back(*platform42);
    platBot.push_back(*platform43);
    platBot.push_back(*platform44);
    platBot.push_back(*platform45);
    platBot.push_back(*platform46);
    
    vector<Platform> playerLeft;
    playerLeft.push_back(*platform28);
    playerLeft.push_back(*platform29);
    playerLeft.push_back(*platform30);
    playerLeft.push_back(*platform33);
    playerLeft.push_back(*platform39);
    playerLeft.push_back(*platform40);
    playerLeft.push_back(*platform41);
    
    vector<Platform> playerRight;
    playerRight.push_back(*platform31);
    playerRight.push_back(*platform32);
    playerRight.push_back(*platform34);
    playerRight.push_back(*platform42);
    playerRight.push_back(*platform43);
    playerRight.push_back(*platform44);
    playerRight.push_back(*platform45);
    playerRight.push_back(*platform46);

    //Saws
    Vector3 saw41Position(17.5, -46.5, 0.0f);
    Vector3 saw41Velocity(2.0f, 0.0f, 0.0f);
    Vector3 saw41Size(0.75f, 0.75f, 0.0f);
    Entity* saw41 = new Entity(saw41Position, saw41Velocity, saw41Size);
    
    Vector3 saw42Position(10.5, -44.5, 0.0f);
    Vector3 saw42Velocity(2.0f, 0.0f, 0.0f);
    Vector3 saw42Size(0.75f, 0.75f, 0.0f);
    Entity* saw42 = new Entity(saw42Position, saw42Velocity, saw42Size);
    
    Vector3 saw43Position(14.15, -29.5, 0.0f);
    Vector3 saw43Velocity(0.0f, -3.0f, 0.0f);
    Vector3 saw43Size(0.75f, 0.75f, 0.0f);
    Entity* saw43 = new Entity(saw43Position, saw43Velocity, saw43Size);

    Vector3 saw44Position(14.15, -39.5, 0.0f);
    Vector3 saw44Velocity(0.0f, 3.0f, 0.0f);
    Vector3 saw44Size(0.75f, 0.75f, 0.0f);
    Entity* saw44 = new Entity(saw44Position, saw44Velocity, saw44Size);


    //Invis
    Vector3 invis15Position(17.25, -54.0, 0.0);
    Vector3 invis15Size(0.5, 0.5, 0.0);
    Platform* invis15 = new Platform(invis15Position, invis15Size);
    
    Vector3 invis16Position(9.5, -46.75, 0.0);
    Vector3 invis16Size(0.25, 1.0, 0.0);
    Platform* invis16 = new Platform(invis16Position, invis16Size);
    
    Vector3 invis17Position(18.55, -44.75, 0.0);
    Vector3 invis17Size(0.25, 1.0, 0.0);
    Platform* invis17 = new Platform(invis17Position, invis17Size);
    
    Vector3 invis18Position(17.25, -41.25, 0.0);
    Vector3 invis18Size(1.0, 0.25, 0.0);
    Platform* invis18 = new Platform(invis18Position, invis18Size);
    
    Vector3 invis19Position(14.15, -41.5, 0.0);
    Vector3 invis19Size(1.0, 0.25, 0.0);
    Platform* invis19 = new Platform(invis19Position, invis19Size);
    
    Vector3 invis20Position(14.15, -28.5, 0.0);
    Vector3 invis20Size(1.0, 0.25, 0.0);
    Platform* invis20 = new Platform(invis20Position, invis20Size);
    
    Vector3 invis21Position(11.15, -39.75, 0.0);
    Vector3 invis21Size(0.25, 1.0, 0.0);
    Platform* invis21 = new Platform(invis21Position, invis21Size);
    
    Vector3 invis22Position(16.5, -37.75, 0.0);
    Vector3 invis22Size(0.25, 1.0, 0.0);
    Platform* invis22 = new Platform(invis22Position, invis22Size);
    
    Vector3 invis23Position(14.0, -35.75, 0.0);
    Vector3 invis23Size(0.25, 1.0, 0.0);
    Platform* invis23 = new Platform(invis23Position, invis23Size);
    
    //Item
    Vector3 item42Position(17.75, -24.0, 0.0);
    Vector3 item42Size(0.5, 0.5, 0.0);
    Item* item42 = new Item(item42Position, item42Size, true);
    
    
    SDL_Event event;
    bool done = false;
    while (!done) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
                done = true;
            }else if(event.type == SDL_KEYDOWN && state == STATE_MAIN_MENU) {
                if(event.key.keysym.scancode == SDL_SCANCODE_2) {
                    state = STATE_PAUSE1;
                    Mix_PlayChannel(-1, buttonPress, 0);
                }else if(event.key.keysym.scancode == SDL_SCANCODE_3) {
                    state = STATE_PAUSE2;
                    Mix_PlayChannel(-1, buttonPress, 0);
                }
                else
                    state = STATE_GAME_LEVEL1;
                    Mix_PlayChannel(-1, buttonPress, 0);
            }else if(event.type == SDL_KEYDOWN && state == STATE_GAME_LEVEL1) {
                if(event.key.keysym.scancode == SDL_SCANCODE_SPACE) {
                    moveJump = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_DOWN) {
                    moveDown = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_LEFT) {
                    moveLeft = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_RIGHT) {
                    moveRight = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_ESCAPE) {
                    viewMatrix.identity();
                    state = STATE_MAIN_MENU;
                    Mix_PlayChannel(-1, buttonPress, 0);
                }
            }else if(event.type == SDL_KEYDOWN && state == STATE_PAUSE1) {
                    state = STATE_GAME_LEVEL2;
                    Mix_PlayChannel(-1, buttonPress, 0);
            }else if(event.type == SDL_KEYDOWN && state == STATE_GAME_LEVEL2) {
                if(event.key.keysym.scancode == SDL_SCANCODE_DOWN) {
                    moveDown = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_LEFT) {
                    moveLeft = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_RIGHT) {
                    moveRight = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_ESCAPE) {
                    viewMatrix.identity();
                    state = STATE_MAIN_MENU;
                    Mix_PlayChannel(-1, buttonPress, 0);
                }
            }else if(event.type == SDL_KEYDOWN && state == STATE_PAUSE2) {
                state = STATE_GAME_LEVEL3;
                Mix_PlayChannel(-1, buttonPress, 0);
            }else if(event.type == SDL_KEYDOWN && state == STATE_GAME_LEVEL3) {
                if(event.key.keysym.scancode == SDL_SCANCODE_SPACE) {
                    moveJump = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_DOWN) {
                    moveDown = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_LEFT) {
                    moveLeft = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_RIGHT) {
                    moveRight = true;
                }
                if(event.key.keysym.scancode == SDL_SCANCODE_ESCAPE) {
                    viewMatrix.identity();
                    state = STATE_MAIN_MENU;
                    Mix_PlayChannel(-1, buttonPress, 0);
                }
            }else if(event.type == SDL_KEYDOWN && state == STATE_GAME_END) {
                if(event.key.keysym.scancode == SDL_SCANCODE_ESCAPE) {
                    viewMatrix.identity();
                    state = STATE_MAIN_MENU;
                    Mix_PlayChannel(-1, buttonPress, 0);
                }
            }
        }
        
        //Game Loop
        glEnable(GL_BLEND);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        glClear(GL_COLOR_BUFFER_BIT);
        
        float ticks = (float)SDL_GetTicks()/1000.0f;
        float elapsed = ticks - lastFrameTicks;
        lastFrameTicks = ticks;
        float fixedElapsed = elapsed;
        if(fixedElapsed > FIXED_TIMESTEP * MAX_TIMESTEPS) {
            fixedElapsed = FIXED_TIMESTEP * MAX_TIMESTEPS;
        }
        while (fixedElapsed >= FIXED_TIMESTEP ) {
            fixedElapsed -= FIXED_TIMESTEP;
        }
        

        program.setProjectionMatrix(projectionMatrix);
        program.setViewMatrix(viewMatrix);
        
    
        switch(state) {
            case STATE_MAIN_MENU:
            {
                //Game Name Texture
                program.setModelMatrix(modelMatrixGameName);
                DrawText(&program, fontTexture, "Game", 0.3, 0);
                
                //Press Button Texture
                program.setModelMatrix(modelMatrixPressButton);
                DrawText(&program, fontTexture, "Press any key to start!", 0.2, 0);
                
                break;
            }
                
            case STATE_GAME_LEVEL1:
            {
                //Draw world
                program.setModelMatrix(modelMatrixBackGround);
                DrawWorld(&program, spriteSheet, 25, 130, levelData[25][130], 8, 3);
                
                
                //Player setup
                program.setModelMatrix(modelMatrixPlayer);
                float playerVertices[] = {7.0, -7.0, 7.5, -6.5, 7.0, -6.5, 7.5, -6.5, 7.0, -7.0, 7.5, -7.0};
                
                //Player walk animation
                animationElapsed += elapsed;
                if(moveRight && onFloor && animationElapsed > 1.0/framesPerSecond) {
                    currentIndex++;
                    animationElapsed = 0.0;
                    if(currentIndex > numFrames-1) {
                        currentIndex = 0;
                    }
                }
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVertices, runAnimation[currentIndex], 8, 4);

                if(moveJump && onFloor) {
                    onFloor = false;
                    Mix_PlayChannel(-1, jumpSound, 0);
                    accelerationY = 6.0;
                    player->velocity.y += accelerationY * FIXED_TIMESTEP;
                }else if(moveDown) {
                    accelerationY = 1.0f;
                    player->velocity.y -= accelerationY * FIXED_TIMESTEP;
                }else if(moveLeft) {
                    player->velocity.x -= accelerationX * FIXED_TIMESTEP;
                }else if(moveRight) {
                    player->velocity.x += accelerationX * FIXED_TIMESTEP;
                }
                
                modelMatrixPlayer.Translate(0.0, -gravity * FIXED_TIMESTEP, 0.0);
                player->position.y -= gravity * FIXED_TIMESTEP;
                
                player->velocity.y = lerp(player->velocity.y, 0.0f, FIXED_TIMESTEP * friction);
                player->velocity.x = lerp(player->velocity.x, 0.0f, FIXED_TIMESTEP * friction);
                
                modelMatrixPlayer.Translate(player->velocity.x, player->velocity.y, 0.0);
                moveJump = false;
                moveDown = false;
                moveLeft = false;
                moveRight = false;
                
                player->position.y += player->velocity.y;
               
                //Check PlayerBot and WorldTop collision for each platform
                for(int i = 0; i < Level1Y.size(); i++) {
                    if(!collisionYBot(Level1Y[i], *player)) {
                        modelMatrixPlayer.Translate(0.0, adjustY + 0.01, 0.0);
                        player->velocity.y = 0.0f;
                        player->position.y += adjustY + 0.01;
                        onFloor = true;
                    }
                }
                
                player->position.x += player->velocity.x;
        
                //Check PlayerRight and WorldLeft collision for each platform
                for(int j = 0; j < Level1X.size(); j++) {
                    if(!collisionXRight(Level1X[j], *player)) {
                        modelMatrixPlayer.Translate(-adjustX + 0.01, 0.0, 0.0);
                        player->velocity.x = 0.0f;
                        player->position.x -= adjustX + 0.01;
                    }
                }
                
                //Check player collision with enemies
                if(!collisionEntityEntity(*enemy1, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                       //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*enemy2, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*enemy3, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*enemy4, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*enemy5, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*enemy6, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;;
                }else if(!collisionEntityEntity(*enemy7, *player)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*fire2, *player)) {
                    Mix_PlayChannel(-1, fireHitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*fire3, *player)) {
                    Mix_PlayChannel(-1, fireHitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*fire4, *player)) {
                    Mix_PlayChannel(-1, fireHitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*fire5, *player)) {
                    Mix_PlayChannel(-1, fireHitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*fire6, *player)) {
                    Mix_PlayChannel(-1, fireHitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*fire7, *player)) {
                    Mix_PlayChannel(-1, fireHitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }
                
                //cout << "X: " << player->position.x << " Y: " << player->position.y << endl;
                
                //Enemy1 setup
                program.setModelMatrix(modelMatrixEnemy1);
                float playerVerticesEnemy1[] = {18.0, -7.0, 18.5, -6.5, 18.0, -6.5, 18.5, -6.5, 18.0, -7.0, 18.5, -7.0};
                
                //Enemy walk animation
                animationElapsedEnemy += elapsed * 0.3;
                if(animationElapsedEnemy > 1.0/framesPerSecondEnemy) {
                    currentIndexEnemy++;
                    animationElapsedEnemy = 0.0;
                    if(currentIndexEnemy > numFramesEnemy-1) {
                        currentIndexEnemy = 0;
                    }
                }
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy1, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy1.Translate(enemy1->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy1->position.x += enemy1->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEnemyWorld(*platform8, *enemy1)) {
                    enemy1->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis1, *enemy1)) {
                    enemy1->velocity.x *= -1;
                }
                
                //Enemy2 setup
                program.setModelMatrix(modelMatrixEnemy2);
                
                float playerVerticesEnemy2[] = {24.0, -7.0, 24.5, -6.5, 24.0, -6.5, 24.5, -6.5, 24.0, -7.0, 24.5, -7.0};
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy2, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy2.Translate(enemy2->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy2->position.x += enemy2->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEnemyWorld(*platform8, *enemy2)) {
                    enemy2->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis1, *enemy2)) {
                    enemy2->velocity.x *= -1;
                }
                
                //Enemy3 setup
                program.setModelMatrix(modelMatrixEnemy3);
                
                float playerVerticesEnemy3[] = {26.0, -4.5, 26.5, -4.0, 26.0, -4.0, 26.5, -4.0, 26.0, -4.5, 26.5, -4.5};
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy3, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy3.Translate(0.0, -gravity * FIXED_TIMESTEP, 0.0);
                enemy3->position.y -= gravity * FIXED_TIMESTEP;
                
                modelMatrixEnemy3.Translate(enemy3->velocity.x, enemy3->velocity.y, 0.0);
                enemy3->position.x += enemy3->velocity.x;
                enemy3->position.y += enemy3->velocity.y;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionYBot(*invisPlat1, *enemy3)) {
                    modelMatrixEnemy3.Translate(0.0, adjustY + 0.01, 0.0);
                    enemy3->velocity.y = 0.0f;
                    enemy3->position.y += adjustY + 0.01;
                }else if(!collisionYBot(*platform9, *enemy3)) {
                    modelMatrixEnemy3.Translate(0.0, adjustY + 0.01, 0.0);
                    enemy3->velocity.y = 0.0f;
                    enemy3->position.y += adjustY + 0.01;
                }

                //Make enemy jump
                if(player->position.x < 27.4) {
                    if(!collisionEnemyWorld(*invis3, *enemy3)) {
                        enemy3->velocity.x *= -1;
                    }
                    if(!collisionEnemyWorld(*invis2, *enemy3)) {
                        enemy3->velocity.x *= -1;
                    }
                }else if(player->position.x >= 27.4) {
                    if(!collisionEnemyWorld(*invis3, *enemy3)) {
                        enemy3->velocity.y = .07;
                        enemy3->velocity.x = 0.05;
                    }
                    if(collisionEnemyWorld(*invis3, *enemy3) && temp != false) {
                        enemy3->velocity.y = 0.0;
                        enemy3->velocity.x = 0.03;
                    }
                    if(!collisionEnemyWorld(*invis4, *enemy3)) {
                        enemy3->velocity.x *= -1;
                        temp = false;
                    }else if(!collisionEnemyWorld(*invis5, *enemy3)) {
                        enemy3->velocity.x *= -1;
                    }
                }
                
                //Enemy4 setup
                program.setModelMatrix(modelMatrixEnemy4);
                
                float playerVerticesEnemy4[] = {31.5, -5.5, 32.0, -5.0, 31.5, -5.0, 32.0, -5.0, 31.5, -5.5, 32.0, -5.5};
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy4, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy4.Translate(enemy4->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy4->position.x += enemy4->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEnemyWorld(*invis6, *enemy4)) {
                    enemy4->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis7, *enemy4)) {
                    enemy4->velocity.x *= -1;
                }
                
                //Enemy5 setup
                program.setModelMatrix(modelMatrixEnemy5);
                
                float playerVerticesEnemy5[] = {43.5, -5.5, 44.0, -5.0, 43.5, -5.0, 44.0, -5.0, 43.5, -5.5, 44.0, -5.5};
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy5, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy5.Translate(enemy5->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy5->position.x += enemy5->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEntityEntity(*fire7, *enemy5)) {
                    enemy5->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis8, *enemy5)) {
                    enemy5->velocity.x *= -1;
                }
                
                //Enemy6 setup
                program.setModelMatrix(modelMatrixEnemy6);
                
                float playerVerticesEnemy6[] = {47.5, -5.5, 47.0, -5.0, 47.5, -5.0, 47.0, -5.0, 47.5, -5.5, 47.0, -5.5};
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy6, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy6.Translate(enemy6->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy6->position.x += enemy6->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEnemyWorld(*invis9, *enemy6)) {
                    enemy6->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis8, *enemy6)) {
                    enemy6->velocity.x *= -1;
                }
                
                //Enemy7 setup
                program.setModelMatrix(modelMatrixEnemy7);
                
                float playerVerticesEnemy7[] = {44.5, -5.5, 44.0, -5.0, 44.5, -5.0, 44.0, -5.0, 44.5, -5.5, 44.0, -5.5};
         
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy7, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy7.Translate(enemy7->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy7->position.x += enemy7->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEntityEntity(*fire7, *enemy7)) {
                    enemy7->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis9, *enemy7)) {
                    enemy7->velocity.x *= -1;
                }
                
                //Enemy8 setup
                program.setModelMatrix(modelMatrixEnemy8);
                
                float playerVerticesEnemy8[] = {48.5, -5.5, 48.0, -5.0, 48.5, -5.0, 48.0, -5.0, 48.5, -5.5, 48.0, -5.5};
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVerticesEnemy8, runAnimationEnemy[currentIndexEnemy], 8, 4);
                
                modelMatrixEnemy8.Translate(enemy8->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                enemy8->position.x += enemy8->velocity.x * FIXED_TIMESTEP;
                
                //Invisible boundaries for enemies to turn around
                if(!collisionEntityEntity(*fire7, *enemy8)) {
                    enemy8->velocity.x *= -1;
                }
                if(!collisionEnemyWorld(*invis8, *enemy8)) {
                    enemy8->velocity.x *= -1;
                }
                
                
                //Ruby & Fire setup
                program.setModelMatrix(modelMatrixRuby);
                
                animationElapsedRuby += elapsed * 0.5;
                if(animationElapsedRuby > 1.0/framesPerSecondRuby) {
                    currentIndexRuby++;
                    animationElapsedRuby = 0.0;
                    if(currentIndexRuby > numFramesRuby-1) {
                        currentIndexRuby = 0;
                    }
                }
                
                //Draw rubies and collisinos with player
                float rubyVertices1[] = {12.1, -4.8, 12.35, -4.55, 12.1, -4.55, 12.35, -4.55, 12.1, -4.8, 12.35, -4.8};
                if(item1->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices1, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item1, *player) && item1->alive) {
                    item1->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //-----
                float rubyVertices2[] = {14.1, -4.3, 14.35, -4.05, 14.1, -4.05, 14.35, -4.05, 14.1, -4.3, 14.35, -4.3};
                if(item2->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices2, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item2, *player) && item2->alive) {
                    item2->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                //-----
                
                float rubyVertices3[] = {16.1, -4.3, 16.35, -4.05, 16.1, -4.05, 16.35, -4.05, 16.1, -4.3, 16.35, -4.3};
                if(item3->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices3, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item3, *player) && item3->alive) {
                    item3->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices4[] = {16.5, -4.7, 16.75, -4.45, 16.5, -4.45, 16.75, -4.45, 16.5, -4.7, 16.75, -4.7};
                if(item4->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices4, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item4, *player) && item4->alive) {
                    item4->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices5[] = {16.9, -5.1, 17.15, -4.85, 16.9, -4.85, 17.15, -4.85, 16.9, -5.1, 17.15, -5.1};
                if(item5->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices5, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item5, *player) && item5->alive) {
                    item5->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices6[] = {25.1, -6.4, 25.35, -6.15, 25.1, -6.15, 25.35, -6.15, 25.1, -6.4, 25.35, -6.4};
                if(item6->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices6, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item6, *player) && item6->alive) {
                    item6->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices7[] = {25.5, -6.4, 25.75, -6.15, 25.5, -6.15, 25.75, -6.15, 25.5, -6.4, 25.75, -6.4};
                if(item7->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices7, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item7, *player) && item7->alive) {
                    item7->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices8[] = {25.9, -6.4, 26.15, -6.15, 25.9, -6.15, 26.15, -6.15, 25.9, -6.4, 26.15, -6.4};
                if(item8->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices8, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item8, *player) && item8->alive) {
                    item8->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices9[] = {26.3, -6.4, 26.55, -6.15, 26.3, -6.15, 26.55, -6.15, 26.3, -6.4, 26.55, -6.4};
                if(item9->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices9, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item9, *player) && item9->alive) {
                    item9->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices10[] = {26.7, -6.4, 26.95, -6.15, 26.7, -6.15, 26.95, -6.15, 26.7, -6.4, 26.95, -6.4};
                if(item10->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices10, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item10, *player) && item10->alive) {
                    item10->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices11[] = {27.1, -6.4, 27.35, -6.15, 27.1, -6.15, 27.35, -6.15, 27.1, -6.4, 27.35, -6.4};
                if(item11->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices11, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item11, *player) && item11->alive) {
                    item11->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices12[] = {36.2, -3.0, 36.45, -2.75, 36.2, -2.75, 36.45, -2.75, 36.2, -3.0, 36.45, -3.0};
                if(item12->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices12, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item12, *player) && item12->alive) {
                    item12->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices13[] = {36.7, -3.4, 36.95, -3.15, 36.7, -3.15, 36.95, -3.15, 36.7, -3.4, 36.95, -3.4};
                if(item13->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices13, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item13, *player) && item13->alive) {
                    item13->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices14[] = {37.2, -3.8, 37.45, -3.55, 37.2, -3.55, 37.45, -3.55, 37.2, -3.8, 37.45, -3.8};
                if(item14->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices14, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item14, *player) && item14->alive) {
                    item14->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices15[] = {42.65, -3.4, 42.9, -3.15, 42.65, -3.15, 42.9, -3.15, 42.65, -3.4, 42.9, -3.4};
                if(item15->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices15, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item15, *player) && item15->alive) {
                    item15->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices16[] = {42.65, -5.4, 42.9, -5.15, 42.65, -5.15, 42.9, -5.15, 42.65, -5.4, 42.9, -5.4};
                if(item16->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices16, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item16, *player) && item16->alive) {
                    item16->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices17[] = {43.15, -5.4, 43.4, -5.15, 43.15, -5.15, 43.4, -5.15, 43.15, -5.4, 43.4, -5.4};
                if(item17->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices17, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item17, *player) && item17->alive) {
                    item17->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices18[] = {43.65, -5.4, 43.9, -5.15, 43.65, -5.15, 43.9, -5.15, 43.65, -5.4, 43.9, -5.4};
                if(item18->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices18, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item18, *player) && item18->alive) {
                    item18->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices19[] = {44.15, -5.4, 44.4, -5.15, 44.15, -5.15, 44.4, -5.15, 44.15, -5.4, 44.4, -5.4};
                if(item19->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices19, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item19, *player) && item19->alive) {
                    item19->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices20[] = {44.65, -5.4, 44.9, -5.15, 44.65, -5.15, 44.9, -5.15, 44.65, -5.4, 44.9, -5.4};
                if(item20->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices20, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item20, *player) && item20->alive) {
                    item20->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices21[] = {45.15, -5.4, 45.4, -5.15, 45.15, -5.15, 45.4, -5.15, 45.15, -5.4, 45.4, -5.4};
                if(item21->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices21, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item21, *player) && item21->alive) {
                    item21->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //----
                float rubyVertices22[] = {45.65, -5.4, 45.9, -5.15, 45.65, -5.15, 45.9, -5.15, 45.65, -5.4, 45.9, -5.4};
                if(item22->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices22, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item22, *player) && item22->alive) {
                    item22->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //Fire setup
                animationElapsedFire += elapsed * 0.75;
                if(animationElapsedFire > 1.0/framesPerSecondFire) {
                    currentIndexFire++;
                    animationElapsedFire = 0.0;
                    if(currentIndexFire > numFramesFire-1) {
                        currentIndexFire = 0;
                    }
                }
                
                float fire1[] = {30.5, -2.5, 31.0, -2.0, 30.5, -2.0, 31.0, -2.0, 30.5, -2.5, 31.0, -2.5};
                DrawSpriteSheetSprite(&program, fireTexture, fire1, runAnimationFire[currentIndexFire], 5, 1);
                
                float fire2[] = {37.5, -4.5, 38.0, -4.0, 37.5, -4.0, 38.0, -4.0, 37.5, -4.5, 38.0, -4.5};
                DrawSpriteSheetSprite(&program, fireTexture, fire2, runAnimationFire[currentIndexFire], 5, 1);
                
                float fire3[] = {38.5, -4.5, 39.0, -4.0, 38.5, -4.0, 39.0, -4.0, 38.5, -4.5, 39.0, -4.5};
                DrawSpriteSheetSprite(&program, fireTexture, fire3, runAnimationFire[currentIndexFire], 5, 1);
                
                float fire4[] = {39.5, -4.5, 40.0, -4.0, 39.5, -4.0, 40.0, -4.0, 39.5, -4.5, 40.0, -4.5};
                DrawSpriteSheetSprite(&program, fireTexture, fire4, runAnimationFire[currentIndexFire], 5, 1);
                
                float fire5[] = {44.0, -3.00, 44.5, -2.5, 44.0, -2.5, 44.5, -2.5, 44.0, -3.0, 44.5, -3.0};
                DrawSpriteSheetSprite(&program, fireTexture, fire5, runAnimationFire[currentIndexFire], 5, 1);
                
                //First fire
                float fire6[] = {15.5, -5.0, 16.0, -4.5, 15.5, -4.5, 16.0, -4.5, 15.5, -5.0, 16.0, -5.0};
                DrawSpriteSheetSprite(&program, fireTexture, fire6, runAnimationFire[currentIndexFire], 5, 1);
                
                float fire7[] = {42.0, -5.5, 42.5, -5.0, 42.0, -5.0, 42.5, -5.0, 42.0, -5.5, 42.5, -5.5};
                DrawSpriteSheetSprite(&program, fireTexture, fire7, runAnimationFire[currentIndexFire], 5, 1);
                
                //Score & Health matrix
                program.setModelMatrix(modelMatrixScoreHealth);
                
                if(score_temp->position.y <= -9.5) {
                    //do noting
                }
                else {
                    modelMatrixScoreHealth.Translate(0.0, -gravity * FIXED_TIMESTEP, 0.0);
                    score_temp->position.y -= gravity * FIXED_TIMESTEP;
                }
                
                modelMatrixScoreHealth.Translate(player->velocity.x, player->velocity.y, 0.0);
                
                score_temp->position.x += player->velocity.x;
                score_temp->position.y += player->velocity.y;
                
                //cout << "ScX: " << score_temp->position.x << " ScY: " << score_temp->position.y;
                DrawText(&program, fontTexture, "Score: "+to_string(score), 0.2, 0.0);
                
                float HP1[] = {2.25, -0.15, 2.75, -0.15, 2.75, 0.25, 2.25, -0.15, 2.75, 0.25, 2.25, 0.25};
                float HP2[] = {2.75, -0.15, 3.25, -0.15, 3.25, 0.25, 2.75, -0.15, 3.25, 0.25, 2.75, 0.25};
                float HP3[] = {3.25, -0.15, 3.75, -0.15, 3.75, 0.25, 3.25, -0.15, 3.75, 0.25, 3.25, 0.25};
                
                if(health == 3) {
                    DrawSingle(&program, HP1, fullHeartTexture);
                    DrawSingle(&program, HP2, fullHeartTexture);
                    DrawSingle(&program, HP3, fullHeartTexture);
                }else if(health == 2) {
                    DrawSingle(&program, HP1, fullHeartTexture);
                    DrawSingle(&program, HP2, fullHeartTexture);
                    DrawSingle(&program, HP3, emptyHeartTexture);
                }else if(health == 1) {
                    DrawSingle(&program, HP1, fullHeartTexture);
                    DrawSingle(&program, HP2, emptyHeartTexture);
                    DrawSingle(&program, HP3, emptyHeartTexture);
                }else {
                    DrawSingle(&program, HP1, emptyHeartTexture);
                    DrawSingle(&program, HP2, emptyHeartTexture);
                    DrawSingle(&program, HP3, emptyHeartTexture);
                }
                
                //Go to level 2 when player jumps down
                if(player->position.x >= 52.0 && player->position.y <= -9.5) {
                    state = STATE_PAUSE1;
                }else if(player->position.x >= 12.5 && player->position.x <= 16.5 && player->position.y <= -9.5) {
                    Mix_FadeOutMusic(2500);
                    Mix_PlayChannel(-1, loseSound, 0);
                    state = STATE_GAME_END;
                }else if(player->position.x >= 35.7 && player->position.x <= 37.25 && player->position.y <= -9.5) {
                    Mix_FadeOutMusic(2500);
                    Mix_PlayChannel(-1, loseSound, 0);
                    state = STATE_GAME_END;
                }else if(player->position.x >= 40.25 && player->position.x <= 43.7 && player->position.y <= -9.5) {
                    Mix_FadeOutMusic(2500);
                    Mix_PlayChannel(-1, loseSound, 0);
                    state = STATE_GAME_END;
                }else if(player->position.x >= 48.75 && player->position.x <= 51.65 && player->position.y <= -9.5) {
                    Mix_FadeOutMusic(2500);
                    Mix_PlayChannel(-1, loseSound, 0);
                    state = STATE_GAME_END;
                }
        
                //Scrolling view matrix
                viewMatrix.identity();
                viewMatrix.Translate(-player->position.x, -player->position.y-1, 0);
                program.setViewMatrix(viewMatrix);
                
                break;
            }
                
            case STATE_PAUSE1:
            {
                //Pause
                viewMatrix.identity();
                program.setModelMatrix(modelMatrixPause);
                DrawText(&program, fontTexture, "Prepare to fall!", 0.3, 0);
                
                //Press Button Texture
                program.setModelMatrix(modelMatrixPressButton);
                DrawText(&program, fontTexture, "Press any key to continue...", 0.2, 0);
                
                break;
            }
                
            case STATE_GAME_LEVEL2:
            {
                //viewMatrix.identity()
                if(!music2) {
                    Mix_FadeOutMusic(2500);
                    if(Mix_PlayingMusic() == 0) {
                        Mix_PlayMusic(Level2_music, -1);
                        Mix_VolumeMusic(40);
                        music2 = true;
                    }
                }
                
                
                //BackGround Setup
                program.setModelMatrix(modelMatrixBackGround2);
                DrawWorld2(&program, spriteSheet, 150, 40, 8, 3);
                
                //Player setup
                program.setModelMatrix(modelMatrixPlayer2);
                float playerVertices[] = {9.75, -5.25, 10.25, -4.75, 9.75, -4.75, 10.25, -4.75, 9.75, -5.25, 10.25, -5.25};
                
                //Player walk animation
                animationElapsed += elapsed;
                if(moveRight && onFloor && animationElapsed > 1.0/framesPerSecond) {
                    currentIndex++;
                    animationElapsed = 0.0;
                    if(currentIndex > numFrames-1) {
                        currentIndex = 0;
                    }
                }
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVertices, runAnimation[currentIndex], 8, 4);

                if(moveDown) {
                    accelerationY = 1.0f;
                    player2->velocity.y -= accelerationY * FIXED_TIMESTEP;
                }else if(moveLeft) {
                    player2->velocity.x -= accelerationX * FIXED_TIMESTEP;
                }else if(moveRight) {
                    player2->velocity.x += accelerationX * FIXED_TIMESTEP;
                }
                
                modelMatrixPlayer2.Translate(0.0, -gravity2 * FIXED_TIMESTEP, 0.0);
                player2->position.y -= gravity2 * FIXED_TIMESTEP;
                
                player2->velocity.y = lerp(player2->velocity.y, 0.0f, FIXED_TIMESTEP * friction);
                player2->velocity.x = lerp(player2->velocity.x, 0.0f, FIXED_TIMESTEP * friction);
                
                modelMatrixPlayer2.Translate(player2->velocity.x, player2->velocity.y, 0.0);
                moveDown = false;
                moveLeft = false;
                moveRight = false;
                
                player2->position.y += player2->velocity.y;
                
                //Check player bottom and floor
                if(!collisionYBot(*platform23, *player2)) {
                    modelMatrixPlayer2.Translate(0.0, adjustY + 0.01, 0.0);
                    player2->velocity.y = 0.0f;
                    player2->position.y += adjustY + 0.01;
                }
                
                player2->position.x += player2->velocity.x;
                
                //Check player right and right wall
                if(!collisionXRight(*platform22, *player2)) {
                    modelMatrixPlayer2.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player2->velocity.x = 0.0f;
                    player2->position.x -= adjustX + 0.01;
                }
                
                //Check player left and left wall
                if(!collisionXLeft(*platform21, *player2)) {
                    modelMatrixPlayer2.Translate(adjustX + 0.01, 0.0, 0.0);
                    player2->velocity.x = 0.0f;
                    player2->position.x += adjustX + 0.01;
                }
                
                //cout << "X: " << player2->position.x << " Y: " << player2->position.y << endl;
                
                //Check collision between player and saws
                for(int i = 0; i < saw.size(); i++) {
                    if(!collisionEntityEntity(saw[i], *player2)) {
                        Mix_PlayChannel(-1, hitSound, 0);
                        if(health == 0) {
                            //dont subtract
                        }else
                            health -= 1;
                    }
                }
                
                //Check collision for moving saws
                if(!collisionEntityEntity(*saw17, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw18, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw32, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw33, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw34, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw35, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw36, *player2)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }
                
                //Saw setup
                program.setModelMatrix(modelMatrixSaw);
                float saw1f[] = {7.25, -12.5, 8.25, -12.5, 8.25, -11.5, 7.25, -12.5, 8.25, -11.5, 7.25, -11.5};
                float saw2f[] = {8.25, -13.5, 9.25, -13.5, 9.25, -12.5, 8.25, -13.5, 9.25, -12.5, 8.25, -12.5};
                float saw3f[] = {9.25, -14.5, 10.25, -14.5, 10.25, -13.5, 9.25, -14.5, 10.25, -13.5, 9.25, -13.5};
                float saw4f[] = {10.25, -15.5, 11.25, -15.5, 11.25, -14.5, 10.25, -15.5, 11.25, -14.5, 10.25, -14.5};
                DrawSingle(&program, saw1f, smallSawTexture);
                DrawSingle(&program, saw2f, smallSawTexture);
                DrawSingle(&program, saw3f, smallSawTexture);
                DrawSingle(&program, saw4f, smallSawTexture);
                
                float saw5f[] = {7.25, -19.5, 8.25, -19.5, 8.25, -18.5, 7.25, -19.5, 8.25, -18.5, 7.25, -18.5};
                float saw6f[] = {8.5, -19.5, 9.5, -19.5, 9.5, -18.5, 8.5, -19.5, 9.5, -18.5, 8.5, -18.5};
                float saw7f[] = {10.5, -19.5, 11.5, -19.5, 11.5, -18.5, 10.5, -19.5, 11.5, -18.5, 10.5, -18.5};
                float saw8f[] = {11.75, -19.5, 12.75, -19.5, 12.75, -18.5, 11.75, -19.5, 12.75, -18.5, 11.75, -18.5};
                DrawSingle(&program, saw5f, smallSawTexture);
                DrawSingle(&program, saw6f, smallSawTexture);
                DrawSingle(&program, saw7f, smallSawTexture);
                DrawSingle(&program, saw8f, smallSawTexture);
                
                float saw9f[] = {7.25, -22.5, 8.25, -22.5, 8.25, -21.5, 7.25, -22.5, 8.25, -21.5, 7.25, -21.5};
                float saw10f[] = {8.5, -22.5, 9.5, -22.5, 9.5, -21.5, 8.5, -22.5, 9.5, -21.5, 8.5, -21.5};
                float saw11f[] = {9.75, -22.5, 10.75, -22.5, 10.75, -21.5, 9.75, -22.5, 10.75, -21.5, 9.75, -21.5};
                float saw12f[] = {11.75, -22.5, 12.75, -22.5, 12.75, -21.5, 11.75, -22.5, 12.75, -21.5, 11.75, -21.5};
                DrawSingle(&program, saw9f, smallSawTexture);
                DrawSingle(&program, saw10f, smallSawTexture);
                DrawSingle(&program, saw11f, smallSawTexture);
                DrawSingle(&program, saw12f, smallSawTexture);
                
                float saw13f[] = {7.25, -25.5, 8.25, -25.5, 8.25, -24.5, 7.25, -25.5, 8.25, -24.5, 7.25, -24.5};
                float saw14f[] = {8.5, -25.5, 9.5, -25.5, 9.5, -24.5, 8.5, -25.5, 9.5, -24.5, 8.5, -24.5};
                float saw15f[] = {9.75, -25.5, 10.75, -25.5, 10.75, -24.5, 9.75, -25.5, 10.75, -24.5, 9.75, -24.5};
                float saw16f[] = {11.0, -25.5, 12.0, -25.5, 12.0, -24.5, 11.0, -25.5, 12.0, -24.5, 11.0, -24.5};
                DrawSingle(&program, saw13f, smallSawTexture);
                DrawSingle(&program, saw14f, smallSawTexture);
                DrawSingle(&program, saw15f, smallSawTexture);
                DrawSingle(&program, saw16f, smallSawTexture);
                
                //Moving saw 17
                program.setModelMatrix(modelMatrixSaw17);
                float saw17f[] = {7.25, -28.5, 8.25, -28.5, 8.25, -27.5, 7.25, -28.5, 8.25, -27.5, 7.25, -27.5};
                DrawSingle(&program, saw17f, smallSawTexture);
                
                modelMatrixSaw17.Translate(saw17->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw17->position.x += saw17->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis10, *saw17)) {
                    saw17->velocity.x *= -1;
                }
                if(saw17->position.x - saw17->size.x <= 6.75) {
                    saw17->velocity.x *= -1;
                }
                
                program.setModelMatrix(modelMatrixSaw18);
                float saw18f[] = {11.75, -28.5, 12.75, -28.5, 12.75, -27.5, 11.75, -28.5, 12.75, -27.5, 11.75, -27.5};
                DrawSingle(&program, saw18f, smallSawTexture);
                
                modelMatrixSaw18.Translate(saw18->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw18->position.x += saw18->velocity.x * FIXED_TIMESTEP;
                
                //Moving saw 18
                if(!collisionEnemyWorld(*invis10, *saw18)) {
                    saw18->velocity.x *= -1;
                }
                if(saw18->position.x + saw18->size.x >= 13.25) {
                    saw18->velocity.x *= -1;
                }
                
                program.setModelMatrix(modelMatrixSaw);
                float saw19f[] = {11.75, -32.5, 12.75, -32.5, 12.75, -31.5, 11.75, -32.5, 12.75, -31.5, 11.75, -31.5};
                DrawSingle(&program, saw19f, smallSawTexture);
                
                float saw20f[] = {10.75, -33.5, 11.75, -33.5, 11.75, -32.5, 10.75, -33.5, 11.75, -32.5, 10.75, -32.5};
                DrawSingle(&program, saw20f, smallSawTexture);
                
                float saw21f[] = {9.75, -32.5, 10.75, -32.5, 10.75, -31.5, 9.75, -32.5, 10.75, -31.5, 9.75, -31.5};
                DrawSingle(&program, saw21f, smallSawTexture);
                
                float saw22f[] = {8.5, -32.5, 9.5, -32.5, 9.5, -31.5, 8.5, -32.5, 9.5, -31.5, 8.5, -31.5};
                DrawSingle(&program, saw22f, smallSawTexture);
                
                float saw23f[] = {8.0, -33.5, 9.0, -33.5, 9.0, -32.5, 8.0, -33.5, 9.0, -32.5, 8.0, -32.5};
                DrawSingle(&program, saw23f, smallSawTexture);
                
                float saw24f[] = {8.0, -34.75, 9.0, -34.75, 9.0, -33.75, 8.0, -34.75, 9.0, -33.75, 8.0, -33.75};
                DrawSingle(&program, saw24f, smallSawTexture);
                
                float saw25f[] = {8.0, -36.0, 9.0, -36.0, 9.0, -35.0, 8.0, -36.0, 9.0, -35.0, 8.0, -35.0};
                DrawSingle(&program, saw25f, smallSawTexture);
                
                float saw26f[] = {7.25, -38.0, 8.25, -38.0, 8.25, -37.0, 7.25, -38.0, 8.25, -37.0, 7.25, -37.0};
                float saw27f[] = {8.25, -39.0, 9.25, -39.0, 9.25, -38.0, 8.25, -39.0, 9.25, -38.0, 8.25, -38.0};
                float saw28f[] = {10.25, -39.0, 11.25, -39.0, 11.25, -38.0, 10.25, -39.0, 11.25, -38.0, 10.25, -38.0};
                float saw29f[] = {10.25, -40.25, 11.25, -40.25, 11.25, -39.25, 10.25, -40.25, 11.25, -39.25, 10.25, -39.25};
                float saw31f[] = {10.25, -41.5, 11.25, -41.5, 11.25, -40.5, 10.25, -41.5, 11.25, -40.5, 10.25, -40.5};
                DrawSingle(&program, saw26f, smallSawTexture);
                DrawSingle(&program, saw27f, smallSawTexture);
                DrawSingle(&program, saw28f, smallSawTexture);
                DrawSingle(&program, saw29f, smallSawTexture);
                DrawSingle(&program, saw31f, smallSawTexture);
                
                //Moving saw 32
                program.setModelMatrix(modelMatrixSaw32);
                float saw32f[] = {7.25, -43.5, 8.25, -43.5, 8.25, -42.5, 7.25, -43.5, 8.25, -42.5, 7.25, -42.5};
                DrawSingle(&program, saw32f, smallSawTexture);
                
                modelMatrixSaw32.Translate(saw32->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw32->position.x += saw32->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis11, *saw32)) {
                    saw32->velocity.x *= -1;
                }
                if(saw32->position.x - saw32->size.x <= 6.75) {
                    saw32->velocity.x *= -1;
                }
                
                 //Moving saw 33
                program.setModelMatrix(modelMatrixSaw33);
                float saw33f[] = {11.75, -43.5, 12.75, -43.5, 12.75, -42.5, 11.75, -43.5, 12.75, -42.5, 11.75, -42.5};
                DrawSingle(&program, saw33f, smallSawTexture);
                
                modelMatrixSaw33.Translate(saw33->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw33->position.x += saw33->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis11, *saw33)) {
                    saw33->velocity.x *= -1;
                }
                if(saw33->position.x + saw33->size.x >= 13.25) {
                    saw33->velocity.x *= -1;
                }
                
                //Moving saw 34
                program.setModelMatrix(modelMatrixSaw34);
                float saw34f[] = {7.25, -45.5, 8.25, -45.5, 8.25, -44.5, 7.25, -45.5, 8.25, -44.5, 7.25, -44.5};
                DrawSingle(&program, saw34f, smallSawTexture);
                
                modelMatrixSaw34.Translate(saw34->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw34->position.x += saw34->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis12, *saw34)) {
                    saw34->velocity.x *= -1;
                }
                if(saw34->position.x - saw34->size.x <= 6.25) {
                    saw34->velocity.x *= -1;
                }
                
                //Moving saw 35
                program.setModelMatrix(modelMatrixSaw35);
                float saw35f[] = {11.75, -46.75, 12.75, -46.75, 12.75, -45.75, 11.75, -46.75, 12.75, -45.75, 11.75, -45.75};
                DrawSingle(&program, saw35f, smallSawTexture);
                
                modelMatrixSaw35.Translate(saw35->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw35->position.x += saw35->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis13, *saw35)) {
                    saw35->velocity.x *= -1;
                }
                if(saw35->position.x + saw35->size.x >= 13.25) {
                    saw35->velocity.x *= -1;
                }
                
                //Moving saw 36
                program.setModelMatrix(modelMatrixSaw36);
                float saw36f[] = {9.65, -53.5, 10.65, -53.5, 10.65, -52.5, 9.65, -53.5, 10.65, -52.5, 9.65, -52.5};
                DrawSingle(&program, saw36f, smallSawTexture);
                
                 modelMatrixSaw36.Translate(0.0, saw36->velocity.y * FIXED_TIMESTEP, 0.0);
                 saw36->position.y += saw36->velocity.y * FIXED_TIMESTEP;
                 
                 if(!collisionEnemyWorld(*invis14, *saw36)) {
                     saw36->velocity.y *= -1;
                 }
                 if(saw36->position.y - saw36->size.y <= -54.4) {
                     saw36->velocity.y *= -1;
                 }
                
                program.setModelMatrix(modelMatrixSaw);
                float saw37f[] = {7.25, -55.0, 8.25, -55.0, 8.25, -54.0, 7.25, -55.0, 8.25, -54.0, 7.25, -54.0};
                float saw38f[] = {8.5, -55.0, 9.5, -55.0, 9.5, -54.0, 8.5, -55.0, 9.5, -54.0, 8.5, -54.0};
                float saw39f[] = {10.5, -55.0, 11.5, -55.0, 11.5, -54.0, 10.5, -55.0, 11.5, -54.0, 10.5, -54.0};
                float saw40f[] = {11.75, -55.0, 12.75, -55.0, 12.75, -54.0, 11.75, -55.0, 12.75, -54.0, 11.75, -54.0};
                DrawSingle(&program, saw37f, smallSawTexture);
                DrawSingle(&program, saw38f, smallSawTexture);
                DrawSingle(&program, saw39f, smallSawTexture);
                DrawSingle(&program, saw40f, smallSawTexture);
                
                //Ruby setup
                program.setModelMatrix(modelMatrixRuby);
                
                animationElapsedRuby += elapsed * 0.5;
                if(animationElapsedRuby > 1.0/framesPerSecondRuby) {
                    currentIndexRuby++;
                    animationElapsedRuby = 0.0;
                    if(currentIndexRuby > numFramesRuby-1) {
                        currentIndexRuby = 0;
                    }
                }
                
                float rubyVertices23[] = {11.15, -32.0, 11.4, -31.75, 11.15, -31.75, 11.4, -31.75, 11.15, -32.0, 11.4, -32.0};
                if(item23->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices23, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item23, *player2) && item23->alive) {
                    item23->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices24[] = {7.5, -33.0, 7.75, -32.75, 7.5, -32.75, 7.75, -32.75, 7.5, -33.0, 7.75, -33.0};
                if(item24->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices24, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item24, *player2) && item24->alive) {
                    item24->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices25[] = {7.5, -34.0, 7.75, -33.75, 7.5, -33.75, 7.75, -33.75, 7.5, -34.0, 7.75, -34.0};
                if(item25->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices25, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item25, *player2) && item25->alive) {
                    item25->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices26[] = {7.5, -35.0, 7.75, -34.75, 7.5, -34.75, 7.75, -34.75, 7.5, -35.0, 7.75, -35.0};
                if(item26->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices26, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item26, *player2) && item26->alive) {
                    item26->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices27[] = {7.5, -36.0, 7.75, -35.75, 7.5, -35.75, 7.75, -35.75, 7.5, -36.0, 7.75, -36.0};
                if(item27->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices27, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item27, *player2) && item27->alive) {
                    item27->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices28[] = {9.85, -43.0, 10.1, -42.75, 9.85, -42.75, 10.1, -42.75, 9.85, -43.0, 10.1, -43.0};
                if(item28->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices28, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item28, *player2) && item28->alive) {
                    item28->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices29[] = {9.85, -44.0, 10.1, -43.75, 9.85, -43.75, 10.1, -43.75, 9.85, -44.0, 10.1, -44.0};
                if(item29->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices29, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item29, *player2) && item29->alive) {
                    item29->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices30[] = {9.85, -45.0, 10.1, -44.75, 9.85, -44.75, 10.1, -44.75, 9.85, -45.0, 10.1, -45.0};
                if(item30->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices30, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item30, *player2) && item30->alive) {
                    item30->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices31[] = {9.85, -46.0, 10.1, -45.75, 9.85, -45.75, 10.1, -45.75, 9.85, -46.0, 10.1, -46.0};
                if(item31->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices31, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item31, *player2) && item31->alive) {
                    item31->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices32[] = {12.0, -15.15, 12.25, -14.9, 12.0, -14.9, 12.25, -14.9, 12.0, -15.15, 12.25, -15.15};
                if(item32->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices32, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item32, *player2) && item32->alive) {
                    item32->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices33[] = {12.0, -16.15, 12.25, -15.9, 12.0, -15.9, 12.25, -15.9, 12.0, -16.15, 12.25, -16.15};
                if(item33->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices33, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item33, *player2) && item33->alive) {
                    item33->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices34[] = {12.35, -24.9, 12.6, -24.65, 12.35, -24.65, 12.6, -24.65, 12.35, -24.9, 12.6, -24.9};
                if(item34->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices34, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item34, *player2) && item34->alive) {
                    item34->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices35[] = {12.35, -25.9, 12.6, -25.65, 12.35, -25.65, 12.6, -25.65, 12.35, -25.9, 12.6, -25.9};
                if(item35->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices35, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item35, *player2) && item35->alive) {
                    item35->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices36[] = {12.35, -26.9, 12.6, -26.65, 12.35, -26.65, 12.6, -26.65, 12.35, -26.9, 12.6, -26.9};
                if(item36->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices36, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item36, *player2) && item36->alive) {
                    item36->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices37[] = {12.0, -39.25, 12.25, -39.0, 12.0, -39.0, 12.25, -39.0, 12.0, -39.25, 12.25, -39.25};
                if(item37->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices37, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item37, *player2) && item37->alive) {
                    item37->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices38[] = {12.0, -40.25, 12.25, -40.0, 12.0, -40.0, 12.25, -40.0, 12.0, -40.25, 12.25, -40.25};
                if(item38->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices38, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item38, *player2) && item38->alive) {
                    item38->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices39[] = {10.0, -50.25, 10.25, -50.0, 10.0, -50.0, 10.25, -50.0, 10.0, -50.25, 10.25, -50.25};
                if(item39->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices39, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item39, *player2) && item39->alive) {
                    item39->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices40[] = {10.0, -48.25, 10.25, -48.0, 10.0, -48.0, 10.25, -48.0, 10.0, -48.25, 10.25, -48.25};
                if(item40->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices40, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item40, *player2) && item40->alive) {
                    item40->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                float rubyVertices41[] = {10.0, -52.25, 10.25, -52.0, 10.0, -52.0, 10.25, -52.0, 10.0, -52.25, 10.25, -52.25};
                if(item41->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices41, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item41, *player2) && item41->alive) {
                    item41->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    score += 100;
                }
                
                //Score & Health matrix
                program.setModelMatrix(modelMatrixScoreHealth2);
                
                if(score_temp->position.y <= -69.7) {
                    //do noting
                }
                else {
                    modelMatrixScoreHealth2.Translate(0.0, -gravity2 * FIXED_TIMESTEP, 0.0);
                    score_temp->position.y -= gravity2 * FIXED_TIMESTEP;
               }
                
                modelMatrixScoreHealth2.Translate(player2->velocity.x, player2->velocity.y, 0.0);
                
                score_temp->position.x += player2->velocity.x;
                score_temp->position.y += player2->velocity.y;
                
                DrawText(&program, fontTexture, "Score: "+to_string(score), 0.2, 0.0);
                
                float HP1[] = {2.25, -0.15, 2.75, -0.15, 2.75, 0.25, 2.25, -0.15, 2.75, 0.25, 2.25, 0.25};
                float HP2[] = {2.75, -0.15, 3.25, -0.15, 3.25, 0.25, 2.75, -0.15, 3.25, 0.25, 2.75, 0.25};
                float HP3[] = {3.25, -0.15, 3.75, -0.15, 3.75, 0.25, 3.25, -0.15, 3.75, 0.25, 3.25, 0.25};
                
                if(health == 3) {
                    DrawSingle(&program, HP1, fullHeartTexture);
                    DrawSingle(&program, HP2, fullHeartTexture);
                    DrawSingle(&program, HP3, fullHeartTexture);
                }else if(health == 2) {
                    DrawSingle(&program, HP1, fullHeartTexture);
                    DrawSingle(&program, HP2, fullHeartTexture);
                    DrawSingle(&program, HP3, emptyHeartTexture);
                }else if(health == 1) {
                    DrawSingle(&program, HP1, fullHeartTexture);
                    DrawSingle(&program, HP2, emptyHeartTexture);
                    DrawSingle(&program, HP3, emptyHeartTexture);
                }else {
                    DrawSingle(&program, HP1, emptyHeartTexture);
                    DrawSingle(&program, HP2, emptyHeartTexture);
                    DrawSingle(&program, HP3, emptyHeartTexture);
                }
                
                //Scroll view
                viewMatrix.identity();
                viewMatrix.Translate(-player2->position.x, -player2->position.y+2, 0);
                program.setViewMatrix(viewMatrix);
                
                //Change states to level 3
                if(player2->position.y <= -65.0 && player2->position.x >= 13.0) {
                    state = STATE_PAUSE2;
                }
  
                break;
            }
                
            case STATE_PAUSE2: {
                viewMatrix.identity();
                //Pause
                program.setModelMatrix(modelMatrixPause2);
                DrawText(&program, fontTexture, "Get ready to climb!", 0.3, 0);
                
                //Press Button Texture
                program.setModelMatrix(modelMatrixPressButton);
                DrawText(&program, fontTexture, "Press any key to continue...", 0.2, 0);
                
                break;
            }
                
            case STATE_GAME_LEVEL3: {
                
                //Switch music
                if(!music3) {
                    Mix_FadeOutMusic(2500);
                    if(Mix_PlayingMusic() == 0) {
                        Mix_PlayMusic(Level3_music, -1);
                        Mix_VolumeMusic(30);
                        music3 = true;
                    }
                }
                
                //BackGround Setup
                program.setModelMatrix(modelMatrixBackGround3);
                DrawWorld3(&program, spriteSheet, 150, 62, 8, 3);
                
                //Player setup
                program.setModelMatrix(modelMatrixPlayer3);
                
                float playerVertices[] = {7.0, -65.5, 7.5, -65.0, 7.0, -65.0, 7.5, -65.0, 7.0, -65.5, 7.5, -65.5};
                
                //Player walk animation
                animationElapsed += elapsed;
                if(moveRight && onFloor && animationElapsed > 1.0/framesPerSecond) {
                    currentIndex++;
                    animationElapsed = 0.0;
                    if(currentIndex > numFrames-1) {
                        currentIndex = 0;
                    }
                }
                
                DrawSpriteSheetSprite(&program, characterSheet, playerVertices, runAnimation[currentIndex], 8, 4);
                
                //&& onFloor
                if(moveJump) {
                    onFloor = false;
                    Mix_PlayChannel(-1, jumpSound, 0);
                    accelerationY = 10.0;
                    player3->velocity.y += accelerationY * FIXED_TIMESTEP;
                }else if(moveDown) {
                    accelerationY = 1.0f;
                    player3->velocity.y -= accelerationY * FIXED_TIMESTEP;
                }else if(moveLeft) {
                    player3->velocity.x -= accelerationX * FIXED_TIMESTEP;
                }else if(moveRight) {
                    player3->velocity.x += accelerationX * FIXED_TIMESTEP;
                }
                
                modelMatrixPlayer3.Translate(0.0, -gravity3 * FIXED_TIMESTEP, 0.0);
                player3->position.y -= gravity3 * FIXED_TIMESTEP;
                
                player3->velocity.y = lerp(player3->velocity.y, 0.0f, FIXED_TIMESTEP * friction);
                player3->velocity.x = lerp(player3->velocity.x, 0.0f, FIXED_TIMESTEP * friction);
                
                modelMatrixPlayer3.Translate(player3->velocity.x, player3->velocity.y, 0.0);
                moveJump = false;
                moveDown = false;
                moveLeft = false;
                moveRight = false;
                
                player3->position.y += player3->velocity.y;
            
                //Check player bottom and floor
                if(!collisionYBot(*platform26, *player3)) {
                    modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                    player3->velocity.y = 0.0f;
                    player3->position.y += adjustY + 0.01;
                    onFloor = true;
                }
                
                for(int i = 0; i < platBot.size(); i++) {
                    if(!collisionYBot(platBot[i], *player3)) {
                        modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                        player3->velocity.y = 0.0f;
                        player3->position.y += adjustY + 0.01;
                        onFloor = true;
                    }
                }
                
                player3->position.x += player3->velocity.x;
                
                //Check player right and right wall
                if(!collisionXRight(*platform25, *player3)) {
                    modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x -= adjustX + 0.01;
                }
                
                for(int i = 0; i < playerRight.size(); i++) {
                    if(!collisionXRight(playerRight[i], *player3)) {
                        modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                        player3->velocity.x = 0.0f;
                        player3->position.x -= adjustX + 0.01;
                    }
                }
                
                
                //Check player left and left wall
                if(!collisionXLeft(*platform24, *player3)) {
                    modelMatrixPlayer3.Translate(adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x += adjustX + 0.01;
                }
                
                for(int i = 0; i < playerLeft.size(); i++) {
                    if(!collisionXLeft(playerLeft[i], *player3)) {
                        modelMatrixPlayer3.Translate(adjustX + 0.01, 0.0, 0.0);
                        player3->velocity.x = 0.0f;
                        player3->position.x += adjustX + 0.01;
                    }
                }
                
                //Collision for player/saw
                if(!collisionEntityEntity(*saw41, *player3)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw42, *player3)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw43, *player3)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }else if(!collisionEntityEntity(*saw44, *player3)) {
                    Mix_PlayChannel(-1, hitSound, 0);
                    if(health == 0) {
                        //dont subtract
                    }else
                        health -= 1;
                }
                
                cout << "X: " << player3->position.x << " Y: " << player3->position.y << endl;
                
                //Platform setup
                //Moving box1
                program.setModelMatrix(modelMatrixPlatform27);
                
                float platform27f[] = {17.0, -65.5, 17.5, -65.5, 17.5, -65.0, 17.0, -65.5, 17.5, -65.0, 17.0, -65.0};
                DrawSingle(&program, platform27f, goldBoxTexture);
            
            
                //Check for collision with player
                if(!collisionYBot(*platform27, *player3)) {
                    modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                    player3->velocity.y = 0.0f;
                    player3->position.y += adjustY + 0.01;
                    playerOn27 = true;
                }
                
                if(!collisionXRight(*platform27, *player3)) {
                    modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x -= adjustX + 0.01;
                }
                
                //Move box if player is on top
                if(playerOn27 && collisionEnemyWorld(*invis15, *platform27)) {
                    platform27->velocity.y = 3.0;
                    modelMatrixPlatform27.Translate(0.0, platform27->velocity.y * FIXED_TIMESTEP, 0.0);
                    platform27->position.y += platform27->velocity.y * FIXED_TIMESTEP;
                    
                    modelMatrixPlayer3.Translate(0.0, platform27->velocity.y * FIXED_TIMESTEP, 0.0);
                    player3->position.y += platform27->velocity.y * FIXED_TIMESTEP;
                }
                
                
                program.setModelMatrix(modelMatrixStones);
                
                float platform28f[] = {15.0, -53.5, 15.5, -53.5, 15.5, -53.0, 15.0, -53.5, 15.5, -53.0, 15.0, -53.0};
                DrawSingle(&program, platform28f, stoneTexture);
                
                float platform29f[] = {13.0, -52.5, 13.5, -52.5, 13.5, -52.0, 13.0, -52.5, 13.5, -52.0, 13.0, -52.0};
                DrawSingle(&program, platform29f, stoneTexture);
                
                //Large platform
                float platform30f[] = {9.5, -52.0, 11.75, -52.0, 11.75, -51.0, 9.5, -52.0, 11.75, -51.0, 9.5, -51.0};
                DrawSingle(&program, platform30f, halfstoneTexture);
                
                float platform31f[] = {12.5, -50.0, 13.0, -50.0, 13.0, -49.5, 12.5, -50.0, 13.0, -49.5, 12.5, -49.5};
                DrawSingle(&program, platform31f, stoneTexture);
                
                float platform32f[] = {15.0, -49.0, 14.5, -49.0, 14.5, -48.5, 15.0, -49.0, 14.5, -48.5, 15.0, -48.5};
                DrawSingle(&program, platform32f, stoneTexture);
                
                float platform33f[] = {12.5, -47.5, 13.0, -47.5, 13.0, -47.0, 12.5, -47.5, 13.0, -47.0, 12.5, -47.0};
                DrawSingle(&program, platform33f, stoneTexture);
                
                float platform34f[] = {15.0, -46.0, 14.5, -46.0, 14.5, -45.5, 15.0, -46.0, 14.5, -45.5, 15.0, -45.5};
                DrawSingle(&program, platform34f, stoneTexture);
                
                //Moving box2
                program.setModelMatrix(modelMatrixPlatform35);
                
                float platform35f[] = {17.5, -46.0, 17.0, -46.0, 17.0, -45.5, 17.5, -46.0, 17.0, -45.5, 17.5, -45.5};
                DrawSingle(&program, platform35f, goldBoxTexture);
                
                
                //Check for collision with player
                if(!collisionYBot(*platform35, *player3)) {
                    modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                    player3->velocity.y = 0.0f;
                    player3->position.y += adjustY + 0.01;
                    playerOn35 = true;
                }
                
                if(!collisionXRight(*platform35, *player3)) {
                    modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x -= adjustX + 0.01;
                }
                
                //Move box if player is on top
                if(playerOn35 && collisionEnemyWorld(*invis18, *platform35)) {
                    platform35->velocity.y = 3.0;
                    modelMatrixPlatform35.Translate(0.0, platform35->velocity.y * FIXED_TIMESTEP, 0.0);
                    platform35->position.y += platform35->velocity.y * FIXED_TIMESTEP;
                    
                    modelMatrixPlayer3.Translate(0.0, platform35->velocity.y * FIXED_TIMESTEP, 0.0);
                    player3->position.y += platform35->velocity.y * FIXED_TIMESTEP;
                }
                
                //Moving box3
                program.setModelMatrix(modelMatrixPlatform36);
                
                float platform36f[] = {18.5, -40.0, 18.0, -40.0, 18.0, -39.5, 18.5, -40.0, 18.0, -39.5, 18.5, -39.5};
                DrawSingle(&program, platform36f, coinBoxTexture);
                
    
                //Check for collision with player
                if(!collisionYBot(*platform36, *player3)) {
                    modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                    player3->velocity.y = 0.0f;
                    player3->position.y += adjustY + 0.01;
                    playerOn36 = true;
                }
                
                if(!collisionXRight(*platform36, *player3)) {
                    modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x -= adjustX + 0.01;
                }
                
                //Move box if player is on top
                if(playerOn36 && collisionEnemyWorld(*invis21, *platform36)) {
                    platform36->velocity.x = -2.0;
                    modelMatrixPlatform36.Translate(platform36->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                    platform36->position.x += platform36->velocity.x * FIXED_TIMESTEP;
                    
                    modelMatrixPlayer3.Translate(platform36->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                    player3->position.x += platform36->velocity.x * FIXED_TIMESTEP;
                }
                
                //Moving box4
                program.setModelMatrix(modelMatrixPlatform37);
                
                float platform37f[] = {10.0, -38.0, 9.5, -38.0, 9.5, -37.5, 10.0, -38.0, 9.5, -37.5, 10.0, -37.5};
                DrawSingle(&program, platform37f, coinBoxTexture);
                
                //Check for collision with player
                if(!collisionYBot(*platform37, *player3)) {
                    modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                    player3->velocity.y = 0.0f;
                    player3->position.y += adjustY + 0.01;
                    playerOn37 = true;
                }
                
                if(!collisionXRight(*platform37, *player3)) {
                    modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x -= adjustX + 0.01;
                }
                
                //Move box if player is on top
                if(playerOn37 && collisionEnemyWorld(*invis22, *platform37)) {
                    platform37->velocity.x = 2.0;
                    modelMatrixPlatform37.Translate(platform37->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                    platform37->position.x += platform37->velocity.x * FIXED_TIMESTEP;
                    
                    modelMatrixPlayer3.Translate(platform37->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                    player3->position.x += platform37->velocity.x * FIXED_TIMESTEP;
                }
                
                //Moving box5
                program.setModelMatrix(modelMatrixPlatform38);
                
                float platform38f[] = {18.5, -36.0, 18.0, -36.0, 18.0, -35.5, 18.5, -36.0, 18.0, -35.5, 18.5, -35.5};
                DrawSingle(&program, platform38f, coinBoxTexture);
                
                //Check for collision with player
                if(!collisionYBot(*platform38, *player3)) {
                    modelMatrixPlayer3.Translate(0.0, adjustY + 0.01, 0.0);
                    player3->velocity.y = 0.0f;
                    player3->position.y += adjustY + 0.01;
                    playerOn38 = true;
                }
                
                if(!collisionXRight(*platform38, *player3)) {
                    modelMatrixPlayer3.Translate(-adjustX + 0.01, 0.0, 0.0);
                    player3->velocity.x = 0.0f;
                    player3->position.x -= adjustX + 0.01;
                }
                
                //Move box if player is on top
                if(playerOn38 && collisionEnemyWorld(*invis23, *platform38)) {
                    platform38->velocity.x = -2.0;
                    modelMatrixPlatform38.Translate(platform38->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                    platform38->position.x += platform38->velocity.x * FIXED_TIMESTEP;
                    
                    modelMatrixPlayer3.Translate(platform38->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                    player3->position.x += platform38->velocity.x * FIXED_TIMESTEP;
                }
                
                program.setModelMatrix(modelMatrixStones);
                
                float platform39f[] = {12.5, -35.0, 13.0, -35.0, 13.0, -34.5, 12.5, -35.0, 13.0, -34.5, 12.5, -34.5};
                DrawSingle(&program, platform39f, stoneTexture);
                
                float platform40f[] = {11.5, -33.5, 12.0, -33.5, 12.0, -33.0, 11.5, -33.5, 12.0, -33.0, 11.5, -33.0};
                DrawSingle(&program, platform40f, stoneTexture);
                
                float platform41f[] = {10.5, -32.0, 11.0, -32.0, 11.0, -31.5, 10.5, -32.0, 11.0, -31.5, 10.5, -31.5};
                DrawSingle(&program, platform41f, stoneTexture);
                
                float platform42f[] = {11.5, -30.5, 12.0, -30.5, 12.0, -30.0, 11.5, -30.5, 12.0, -30.0, 11.5, -30.0};
                DrawSingle(&program, platform42f, stoneTexture);
                
                float platform43f[] = {12.5, -29.0, 13.0, -29.0, 13.0, -28.5, 12.5, -29.0, 13.0, -28.5, 12.5, -28.5};
                DrawSingle(&program, platform43f, stoneTexture);

                float platform44f[] = {13.5, -27.5, 14.0, -27.5, 14.0, -27.0, 13.5, -27.5, 14.0, -27.0, 13.5, -27.0};
                DrawSingle(&program, platform44f, stoneTexture);
                
                float platform45f[] = {14.5, -26.0, 15.0, -26.0, 15.0, -25.5, 14.5, -26.0, 15.0, -25.5, 14.5, -25.5};
                DrawSingle(&program, platform45f, stoneTexture);
                
                float platform46f[] = {16.25, -25.5, 18.5, -25.5, 18.5, -24.5, 16.25, -25.5, 18.5, -24.5, 16.25, -24.5};
                DrawSingle(&program, platform46f, halfstoneTexture);

                
                
                //Saw-------------
                
                //Moving Saw
                program.setModelMatrix(modelMatrixSaw41);
                float saw41f[] = {17.0, -47.0, 18.0, -47.0, 18.0, -46.0, 17.0, -47.0, 18.0, -46.0, 17.0, -46.0};
                DrawSingle(&program, saw41f, smallSawTexture);
              
                modelMatrixSaw41.Translate(saw41->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw41->position.x += saw41->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis16, *saw41)) {
                    saw41->velocity.x *= -1;
                }
                if(saw41->position.x + saw41->size.x >= 18.75) {
                    saw41->velocity.x *= -1;
                }
                
                program.setModelMatrix(modelMatrixSaw42);
                float saw42f[] = {10.0, -45.0, 11.0, -45.0, 11.0, -44.0, 10.0, -45.0, 11.0, -44.0, 10.0, -44.0};
                DrawSingle(&program, saw42f, smallSawTexture);
                
                modelMatrixSaw42.Translate(saw42->velocity.x * FIXED_TIMESTEP, 0.0, 0.0);
                saw42->position.x += saw42->velocity.x * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis17, *saw42)) {
                    saw42->velocity.x *= -1;
                }
                if(saw42->position.x - saw42->size.x <= 9.25) {
                    saw42->velocity.x *= -1;
                }
                
                //Up/down saw
                program.setModelMatrix(modelMatrixSaw43);
                float saw43f[] = {13.65, -30.0, 14.65, -30.0, 14.65, -29.0, 13.65, -30.0, 14.65, -29.0, 13.65, -29.0};
                DrawSingle(&program, saw43f, smallSawTexture);
                
                modelMatrixSaw43.Translate(0.0, saw43->velocity.y * FIXED_TIMESTEP, 0.0);
                saw43->position.y += saw43->velocity.y * FIXED_TIMESTEP;
                
                if(!collisionEnemyWorld(*invis19, *saw43)) {
                    saw43->velocity.y *= -1;
                }
                if(!collisionEnemyWorld(*invis20, *saw43)) {
                    saw43->velocity.y *= -1;
                }
                
                program.setModelMatrix(modelMatrixSaw44);
                float saw44f[] = {13.65, -40.0, 14.65, -40.0, 14.65, -39.0, 13.65, -40.0, 14.65, -39.0, 13.65, -39.0};
                DrawSingle(&program, saw44f, smallSawTexture);
                
                modelMatrixSaw44.Translate(0.0, saw44->velocity.y * FIXED_TIMESTEP, 0.0);
                saw44->position.y += saw44->velocity.y * FIXED_TIMESTEP;
                 
                if(!collisionEnemyWorld(*invis19, *saw44)) {
                    saw44->velocity.y *= -1;
                }
                if(!collisionEnemyWorld(*invis20, *saw44)) {
                    saw44->velocity.y *= -1;
                }
                
                //Item
                program.setModelMatrix(modelMatrixRuby);
                
                animationElapsedRuby += elapsed * 0.5;
                if(animationElapsedRuby > 1.0/framesPerSecondRuby) {
                    currentIndexRuby++;
                    animationElapsedRuby = 0.0;
                    if(currentIndexRuby > numFramesRuby-1) {
                        currentIndexRuby = 0;
                    }
                }
                
                float rubyVertices42[] = {17.5, -24.25, 18.0, -23.75, 17.5, -23.75, 18.0, -23.75, 17.5, -24.25, 18.0, -24.25};
                if(item42->alive != false) {
                    DrawSpriteSheetSprite(&program, rubyTexture, rubyVertices42, runAnimationRuby[currentIndexRuby], 7, 1);
                }
                
                if(!collisionItemEntity(*item42, *player3) && item42->alive) {
                    item42->alive = false;
                    Mix_PlayChannel(-1, pickUpSound, 0);
                    Mix_FadeOutMusic(2500);
                    Mix_PlayChannel(-1, winSound, 0);
                    state = STATE_GAME_WIN;
                }
                
                //Scroll view
                viewMatrix.identity();
                viewMatrix.Translate(-player3->position.x, -player3->position.y, 0);
                program.setViewMatrix(viewMatrix);

                break;
            }
                
            case STATE_GAME_END: {
                
                viewMatrix.identity();
                program.setModelMatrix(modelMatrixGameOver);
                DrawText(&program, fontTexture, "Game Over!", 0.3, 0.0);
                
                program.setModelMatrix(modelMatrixEndScore);
                DrawText(&program, fontTexture, "Score: "+to_string(score), 0.2, 0.0);
                
                break;
            }
            
            case STATE_GAME_WIN: {
                
                viewMatrix.identity();
                program.setModelMatrix(modelMatrixWin);
                DrawText(&program, fontTexture, "Win!", 0.3, 0.0);
                
                program.setModelMatrix(modelMatrixEndScore);
                DrawText(&program, fontTexture, "Score: "+to_string(score), 0.2, 0.0);
                
                break;
            }
             
        }
        
        
        SDL_GL_SwapWindow(displayWindow);
    }
    
    //Level 1
    delete player;
    delete score_temp;
    delete enemy1;
    delete enemy2;
    delete enemy3;
    delete enemy4;
    delete enemy5;
    delete enemy6;
    delete enemy7;
    delete enemy8;
    delete platform1;
    delete platform2;
    delete platform3;
    delete platform4;
    delete platform5;
    delete platform6;
    delete platform8;
    delete platform9;
    delete platform10;
    delete platform11;
    delete platform12;
    delete platform13;
    delete platform14;
    delete platform15;
    delete platform16;
    delete platform17;
    delete platform18;
    delete platform19;
    delete platform20;
    delete invis1;
    delete invis2;
    delete invis3;
    delete invis4;
    delete invis5;
    delete invis6;
    delete invis7;
    delete invis8;
    delete invis9;
    delete invisPlat1;
    delete item1;
    delete item2;
    delete item3;
    delete item4;
    delete item5;
    delete item6;
    delete item7;
    delete item8;
    delete item9;
    delete item10;
    delete item11;
    delete item12;
    delete item13;
    delete item14;
    delete item15;
    delete item16;
    delete item17;
    delete item18;
    delete item19;
    delete item20;
    delete item21;
    delete item22;
    delete fire2;
    delete fire3;
    delete fire4;
    delete fire5;
    delete fire6;
    delete fire7;
    
    //Level 2
    delete player2;
    delete platform21;
    delete platform22;
    delete platform23;
    delete saw1;
    delete saw2;
    delete saw3;
    delete saw4;
    delete saw5;
    delete saw6;
    delete saw7;
    delete saw8;
    delete saw9;
    delete saw10;
    delete saw11;
    delete saw12;
    delete saw13;
    delete saw14;
    delete saw15;
    delete saw16;
    delete saw17;
    delete saw18;
    delete saw19;
    delete saw20;
    delete saw21;
    delete saw22;
    delete saw23;
    delete saw24;
    delete saw25;
    delete saw26;
    delete saw27;
    delete saw28;
    delete saw29;
    delete saw30;
    delete saw32;
    delete saw33;
    delete saw34;
    delete saw35;
    delete saw36;
    delete saw37;
    delete saw38;
    delete saw39;
    delete saw40;
    delete invis10;
    delete invis11;
    delete invis12;
    delete invis13;
    delete invis14;
    delete item23;
    delete item24;
    delete item25;
    delete item26;
    delete item27;
    delete item28;
    delete item29;
    delete item30;
    delete item31;
    delete item32;
    delete item33;
    delete item34;
    delete item35;
    delete item36;
    delete item37;
    delete item38;
    delete item39;
    delete item40;
    delete item41;
    
    //Level 3
    delete player3;
    delete platform24;
    delete platform25;
    delete platform26;
    delete platform27;
    delete platform28;
    delete platform29;
    delete platform30;
    delete platform31;
    delete platform32;
    delete platform33;
    delete platform34;
    delete platform35;
    delete platform36;
    delete platform37;
    delete platform38;
    delete platform39;
    delete platform40;
    delete platform41;
    delete platform42;
    delete platform43;
    delete platform44;
    delete platform45;
    delete platform46;
    delete saw41;
    delete saw42;
    delete saw43;
    delete saw44;
    delete invis15;
    delete invis16;
    delete invis17;
    delete invis18;
    delete invis19;
    delete invis20;
    delete invis21;
    delete invis22;
    delete invis23;
    delete item42;
    
    SDL_Quit();
    return 0;
}
